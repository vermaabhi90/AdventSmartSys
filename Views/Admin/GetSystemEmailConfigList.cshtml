@model IEnumerable<SmartSys.BL.SystemEmailConfig>
@using Syncfusion.JavaScript.Models
@{
    ViewBag.Title = "GetSystemEmailConfigList";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    System Mail Templete List
</div>
    <div style="margin-bottom:8px;margin-top:5px">
        @Html.ActionLink(" Create", "CreateSystemEmailConfig", new { MailTemplateId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>
        <div style="position:relative">
            @(Html.EJ().Grid<SmartSys.BL.DataHub.DHEvent>("grdMailConfigList")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
        .PageSettings(p => { p.PageSize(20); })
        .EnableAltRow(true)
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportSystemEmailConfigLst")))
        .ContextMenuSettings(contextMenu =>
        {
            contextMenu.EnableContextMenu();
            contextMenu.DisableDefaultItems();
            contextMenu.CustomContextMenuItems(c =>
            {
                c.AddItem("Add_Record", "Add Record");
                c.AddItem("Edit_Record", "Edit Record");
            });

        })
        //.EnablePersistence(true)
        .Columns(col =>
        {
            col.Field("MailTemplateId").HeaderText("MailTemplate Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("TemplateName").HeaderText("Template Name").ValidationRules(v => v.AddRule("required", true)).Width(80).Add();
            col.Field("DocumentType").HeaderText("Document Type").ValidationRules(v => v.AddRule("required", true)).Width(80).Add();
            col.Field("CreatedBy").HeaderText("Created By").ValidationRules(v => v.AddRule("required", true)).Width(80).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Center).Width(100).Add();
            col.Field("ModifiedBy").HeaderText("Modified By").ValidationRules(v => v.AddRule("required", true)).Width(80).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Center).Width(100).Add();
            col.HeaderText("Edit")
           .Template("#edit")
           .AllowFiltering(false)
       .IsUnbound(true)
       .TextAlign(TextAlign.Center)
       .Width(50)
       .Add();
        })
                 .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
            )
        </div>

        <script id="edit" type="text/x-jsrender">
            <a class="btn-xs btn-info  glyphicon glyphicon-pencil" href="/Admin/CreateSystemEmailConfig?MailTemplateId={{:MailTemplateId}}"></a>
        </script>
<script>
    function contextclick(args) {

        if (args.text == "Add Record") {
           
            var path = '@Url.Content("~/Admin/CreateSystemEmailConfig")' + "?MailTemplateId=" + 0
            event.preventDefault();
            window.location.replace(path);

        }

        else
        if (args.text == "Edit Record") {
            var tempData = args.text;
            var grid = $("#grdMailConfigList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var MailTemplateId = result[0]["MailTemplateId"];
            var path = '@Url.Content("~/Admin/CreateSystemEmailConfig")' + "?MailTemplateId=" + MailTemplateId
            event.preventDefault();
            window.location.replace(path);

        }
    }


</script>