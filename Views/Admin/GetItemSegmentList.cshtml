@model IEnumerable<SmartSys.BL.ItemSegment>
@using Syncfusion.JavaScript.Models
@{
    ViewBag.Title = "Segment";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Item Segment List
</div>
<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CreateItemSegment", new { SegmentId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>
    <div style="position:relative">
        @(Html.EJ().Grid<SmartSys.BL.Departmentmodel>("ItemSegment")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
        .EnableAltRow(true)
         .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportSegmentLst")))
        .ContextMenuSettings(contextMenu =>
        {
            contextMenu.EnableContextMenu();
            contextMenu.DisableDefaultItems();
            contextMenu.CustomContextMenuItems(c =>
            {
                c.AddItem("Add_Record", "Add Record");
                c.AddItem("Edit_Segment", "Edit Record");
            });

        })
        .Columns(col =>
        {
            col.Field("SegmentId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("SegmentName").HeaderText("Segment Name").ValidationRules(v => v.AddRule("required", true)).Width(140).Add();
            col.Field("ParentSegmentName").HeaderText("Parent Segment ").ValidationRules(v => v.AddRule("required", true)).Width(150).Add();

            col.Field("Description").HeaderText("Description").ValidationRules(v => v.AddRule("required", true)).Width(140).Add();
            col.Field("CreatedBy").HeaderText("Created By").TextAlign(TextAlign.Left).Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
            col.Field("ModifiedBy").HeaderText("Modified By").Width(180).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();

            col.HeaderText("Edit")
                .Template("#edit")
                .AllowFiltering(false)
            .IsUnbound(true)
            .TextAlign(TextAlign.Center)
            .Width(90)
            .Add();
        })
                  .ClientSideEvents(eve =>
                  {

                      eve.ContextClick("contextclick");
                      //eve.("contextMenuOpen");
                  })
        )
    </div>
    <script id="edit" type="text/x-jsrender">
        <a class="btn-xs btn-info  glyphicon glyphicon-pencil" href="/Admin/CreateItemSegment?SegmentId={{:SegmentId}}"></a>
    </script>
    <script>
        function contextclick(args) {

            if (args.text == "Add Record") {
                var path = '@Url.Content("~/Admin/CreateItemSegment")' + "?SegmentId=" + 0
                event.preventDefault();
                window.location.replace(path);
            }
            else
                if (args.text == "Edit Record") {
                    var tempData = args.text;

                    var grid = $("#ItemSegment").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var SegmentId = result[0]["SegmentId"];
                    var path = '@Url.Content("~/Admin/CreateItemSegment")' + "?SegmentId=" + SegmentId
                    event.preventDefault();
                    window.location.replace(path);

                }
        }

    </script>
