@model IEnumerable<SmartSys.BL.CurrencyModel>

<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Currency List
</div>
<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CreateCurrencyCodes", new { Currency = "Create" }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf"})
</div>
    <div style="position:relative">
        @(Html.EJ().Grid<SmartSys.BL.SysDBCon.SysDBConModel>("grdBudgetac")

                        .Datasource((IEnumerable<object>)@Model)
                .AllowFiltering()
                        .AllowPaging()
                        .PageSettings(p => { p.PageSize(20); })
                        .AllowSorting()
                        .EnableHeaderHover()
                        .AllowResizing()
                        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                        .AllowScrolling()
                       .PageSettings(p => { p.PageSize(20); })
                          .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportCurrencyList")))
                         .ContextMenuSettings(contextMenu =>
                         {
                             contextMenu.EnableContextMenu();
                             contextMenu.DisableDefaultItems();
                             contextMenu.CustomContextMenuItems(c =>
                             {
                                 c.AddItem("Add_Record", "Add Record");
                                 c.AddItem("Edit_Record", "Edit Record");
                             });

                         })
                        //.EnableAltRow(true)
                        .AllowSorting(true)

        .Columns(col =>
        {
            col.Field("CurrencyCode").HeaderText("Currency").IsPrimaryKey(true).Visible(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("ExchangeRate").HeaderText("ExchangeRate").TextAlign(TextAlign.Center).Width(80).Add();
            col.Field("Source").HeaderText("Source").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(60).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").Width(60).Add();

            col.HeaderText("Edit")
            .Template("#edit")
            .IsUnbound(true)
            .AllowFiltering(false)
            .TextAlign(TextAlign.Center)
            .Width(30)
            .Add();
        })
                         .ClientSideEvents(eve =>
                         {
                             eve.ContextClick("contextclick");
                             eve.QueryCellInfo("querycellinfo");
                         })

        )
    </div>
    <script id="edit" type="text/x-jsrender">
        <a class="btn-xs btn-info  glyphicon glyphicon-pencil" href="/Admin/CreateCurrencyCodes?Currency={{:CurrencyCode}}"> </a>
    </script>
<script type="text/javascript">

    function contextclick(args) {

        if (args.text == "Add Record") {
            var path = '@Url.Content("~/Admin/CreateCurrencyCodes")' + "?Currency=" + "Create"
            event.preventDefault();
            window.location.replace(path);
        }
        else
            if (args.text == "Edit Record") {
                var tempData = args.text;

                var grid = $("#grdBudgetac").ejGrid("instance");
                var result = this.getSelectedRecords();
                var CurrencyCode = result[0]["CurrencyCode"];
                var path = '@Url.Content("~/Admin/CreateCurrencyCodes")' + "?Currency=" + CurrencyCode
                event.preventDefault();
                window.location.replace(path);

            }
          

    }
</script>