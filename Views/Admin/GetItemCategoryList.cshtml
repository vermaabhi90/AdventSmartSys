@model IEnumerable<SmartSys.BL.ItemCategory>
@{
    ViewBag.Title = "Segment";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Item Category List
</div>
<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CreateItemCategory", new { CategoryId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>

@(Html.EJ().TreeGrid("TreeGridContainer")
           .TreeColumnIndex(1)
            .AllowColumnResize(true)
            .ChildMapping("ChildItemCategoryList")
            .TreeColumnIndex(1)
            .IsResponsive(true)
            .EnableCollapseAll(true)
            .AllowSorting(true)
            .AllowMultiSorting(true)
            .ShowColumnChooser(true)
            .AllowFiltering(true)
          .Columns(co =>
          {
              co.Field("CategoryId").Visible(true).HeaderText("Category Id").EditType(TreeGridEditingType.Numeric).Add();
              co.Field("Category").HeaderText("Category Name").EditType(TreeGridEditingType.String).Add();
              co.Field("Description").HeaderText("Description").EditType(TreeGridEditingType.String).Add();
              co.Field("ParentCategorytName").HeaderText("ParentCategoryt Name").EditType(TreeGridEditingType.String).Add();
              co.Field("ModifiedBy").HeaderText("Modified By").EditType(TreeGridEditingType.String).Add();
              co.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").EditType(TreeGridEditingType.Datepicker).Add();
          }
          )
                           .ClientSideEvents(cv => cv.ContextMenuOpen("contextMenuOpen"))
                           .SizeSettings(ss => ss.Width("100%").Height("450px"))
                  .ContextMenuSettings(cms => cms.ShowContextMenu(true)
                                       .ContextMenuItems(new List<TreeGridContextMenuItems>() {
              TreeGridContextMenuItems.Add
          }))


                  .SizeSettings(ss => ss.Width("100%").Height("350px"))
                  .EnableResize(true)
                  .EditSettings(e => e.AllowAdding(false))
                      .Datasource(ViewBag.SelectedCategoryItems)

)


<script id="edit" type="text/x-jsrender">
    <a class="btn-xs btn-info  glyphicon glyphicon-pencil" href="/Admin/CreateItemCategory?CategoryId={{:CategoryId}}"></a>
</script>
<script>
        function contextclick(args) {

            if (args.text == "Add Record") {
                var path = '@Url.Content("~/Admin/CreateItemCategory")' + "?CategoryId=" + 0
                event.preventDefault();
                window.location.replace(path);
            }
            else
                if (args.text == "Edit Category") {
                    var tempData = args.text;

                    var grid = $("#ItemCategory").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var CategoryId = result[0]["CategoryId"];
                    var path = '@Url.Content("~/Admin/CreateItemCategory")' + "?CategoryId=" + CategoryId
                    event.preventDefault();
                    window.location.replace(path);

                }
        }

</script>
<script type="text/javascript">
        function contextMenuOpen(args) {
            var isExpandable = true, isCollapsable = true, data;
            data = args.item;
            if (data && data.hasChildRecords) {
                if (data.expanded)
                    isExpandable = false;
                else
                    isCollapsable = false;
            } else {
                isExpandable = false;
                isCollapsable = false;
            }

            var contextMenuItems = [{
                headerText: "Create New",
                eventHandler: customMenuAddHandler,
                menuId: "Create",
                iconClass: "e-topIcon"
            }
            ];
            args.contextMenuItems.push.apply(args.contextMenuItems, contextMenuItems);
            var contextMenuItems = [{
                headerText: "Edit",
                eventHandler: customMenuAddHandler,
                menuId: "EditDetail",
                iconClass: "e-topIcon"
            }
            ];
            args.contextMenuItems.push.apply(args.contextMenuItems, contextMenuItems);

        }

        function customMenuAddHandler(args) {
            var currentMenuId = args.menuId,
                tempData = args.data && $.extend({}, args.data.item), rowPosition;
            if (currentMenuId == "Create") {
                var path = '@Url.Content("~/Admin/CreateItemCategory")' + "?CategoryId=" + 0
                event.preventDefault();
                window.location.replace(path);
            }
            else if (currentMenuId == "EditDetail") {
                var path = '@Url.Content("~/Admin/CreateItemCategory")' + "?CategoryId=" + tempData.CategoryId
                event.preventDefault();
                window.location.replace(path);
            }
            else if (currentMenuId == "Expand") {
                expandCollapseArgs.expanded = true;
            }
            else if (currentMenuId == "Collapse") {
                expandCollapseArgs.expanded = false;
            }
            this.addRow(tempData, rowPosition);
        }


</script>