@model SmartSys.BL.DW.VendorModel
@{
    ViewBag.Title = "DW Vendor Details";
  }
<div>
    @{

        Html.EJ()
            .Dialog("CreateContactDetails")
            .Title("<a id='Title12'></a>")
            .Width(1200)
            .Height(500)
            .ShowOnInit(false)
            .ContentTemplate(@<p></p>)
            .Render();
    }

    <script>
        function openDialog() {
            $("#CreateContactDetails").ejDialog("open");
        }
        function openNestedDialog() {
            $("#CreateContactDetails").ejDialog("open");

        }

    </script>

    <script>
        function toolClickContact(args) {
            if(args.requestType == "add")
            {
                document.getElementById("Title12").innerHTML = 'Add Contact Details';
                 var path = '@Url.Content("~/DWVendor/CreateVendorContactDetails")' + "?VendorDetail=" + @Model.VendorId +',' +""
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");
            }
            else
                if (args.requestType == "beginedit")
                {
                    document.getElementById("Title12").innerHTML = 'Edit Contact Details';
                    var grid = $("#grdContactList").ejGrid("instance");
                   var result = this.getSelectedRecords();
                   var ContactName = result[0]["ContactName"];
                   var path = '@Url.Content("~/DWVendor/CreateVendorContactDetails")' + "?VendorDetail=" + @Model.VendorId + ',' + ContactName
                   $("#CreateContactDetails").ejDialog({
                       contentUrl: path,
                       contentType: "ajax"
                   });
                   $("#CreateContactDetails").ejDialog("open");

                }
            return false;
        }
    </script>

    <script>
        function contextclickContact(args) {

            if (args.text == "Add Record") {
                document.getElementById("Title12").innerHTML = 'Add Contact Details';
                var tempData = args.text;
                var grid = $("#grdContactList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var ContactName = result[0]["ContactName"];
                var path = '@Url.Content("~/DWVendor/CreateVendorContactDetails")' + "?VendorDetail=" + @Model.VendorId +',' +""
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");

            }
            else
                if (args.text == "Edit Record") {
                    document.getElementById("Title12").innerHTML = 'Edit Contact Details';
                    var tempData = args.text;
                    var grid = $("#grdContactList").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var ContactName = result[0]["ContactName"];
                   var path = '@Url.Content("~/DWVendor/CreateVendorContactDetails")' + "?VendorDetail=" + @Model.VendorId + ',' + ContactName
                    $("#CreateContactDetails").ejDialog({
                        contentUrl: path,
                        contentType: "ajax"
                    });
                    $("#CreateContactDetails").ejDialog("open");

                }
                else
                    if(args.text == "Select User")

            {
                document.getElementById("Title12").innerHTML = 'Select User';
                var tempData = args.text;
                var grid = $("#grdContactList").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var VendorContactId = result[0]["VendorContactId"];
                    var UserId = result[0]["UserId"];
                    var UserName = result[0]["UserName"];

                    var path = '@Url.Content("~/DWVendor/AssignVendorUserId")' + "?VendorId=" + @Model.VendorId + "&VendorContactId=" + VendorContactId + "&UserId=" + UserId+ "&UserName=" + UserName
                        $("#CreateContactDetails").ejDialog({
                        contentUrl: path,
                        contentType: "ajax"
                    });
                        $("#CreateContactDetails").ejDialog("open");
                    e.preventDefault();
                    return false;
                }
    }

    </script>
    <script>
    $(document).ready(function () {

        $('.CreateContact').click(function (e) {
            document.getElementById("Title12").innerHTML = 'Add Contact Details';
            var path = '@Url.Content("~/DWVendor/CreateVendorContactDetails")' + "?VendorDetail=" + @Model.VendorId + ',' + ""
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
    </script>

    <script>
        function toolClickBank(args) {
            if(args.requestType == "add")
            {
                document.getElementById("Title12").innerHTML = 'Add Bank Details';
                var path = '@Url.Content("~/DWVendor/CreateVendorBankDetails")' + "?VendorId=" + @Model.VendorId
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");
            }
            else
                if (args.requestType == "beginedit")
                {
                    document.getElementById("Title12").innerHTML = 'Edit Bank Details';
                    var grid = $("#grdBankList").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var AccountNo = result[0]["AccountNo"];
                    var path = '@Url.Content("~/DWVendor/CreateVendorBankDetails")' + "?VendorId=" + @Model.VendorId + "&AccountNo=" + AccountNo
                    $("#CreateContactDetails").ejDialog({
                        contentUrl: path,
                        contentType: "ajax"
                    });
                    $("#CreateContactDetails").ejDialog("open");
                }
            return false;
        }
       </script>
    <script>
    $(document).ready(function () {

        $('.CreateBank').click(function (e) {
            document.getElementById("Title12").innerHTML = 'Add Bank Details';
            var path = '@Url.Content("~/DWVendor/CreateVendorBankDetails")' + "?VendorId=" + @Model.VendorId
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
    </script>

    <script>
    $(document).ready(function () {

        $('.CreateAddress').click(function (e) {
            document.getElementById("Title12").innerHTML = 'Add Address Details';
          var path = '@Url.Content("~/DWVendor/CreateVendorAddress")' + "?VendorId=" + @Model.VendorId + "&AddressId=" + 0
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
    </script>
    <script>
    function toolClickAddress(args) {
        if(args.requestType == "add")
        {document.getElementById("Title12").innerHTML = 'Add Address Details';
            var grid = $("#grdAddressList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var path = '@Url.Content("~/DWVendor/CreateVendorAddress")' + "?VendorId=" + @Model.VendorId + "&AddressId=" + 0
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");
        }
        else
            if (args.requestType == "beginedit")
            {document.getElementById("Title12").innerHTML = 'Edit Address Details';
                var grid = $("#grdAddressList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var AddressId = result[0]["AddressId"];
                var StateId = result[0]["StateId"];
                var CountryId = result[0]["CountryId"];

                var path = '@Url.Content("~/DWVendor/CreateNewVendorAddress")' + "?VendorId=" + @Model.VendorId + "&AddressId=" + AddressId + "&State=" + StateId + "&country=" + CountryId
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");

            }
        return false;
    }
    </script>

    <script>
        function toolClickLibrary(args) {
            if(args.requestType == "add")
            {  document.getElementById("Title12").innerHTML = 'Add Library details';
                var grid = $("#grdLibraryList").ejGrid("instance");
                var result = this.getSelectedRecords();
            var path = '@Url.Content("~/DWVendor/VendorLibary")' + "?VendorId=" + @Model.VendorId + "&IsKyc=" + "Library"
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");


            }
            return false;
        }
    </script>

    <script>
        function contextclickProduct(args) {

            if (args.text == "Add Record") {
                var tempData = args.text;
                var grid = $("#grdProductList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var VendorName = result[0]["VendorName"];

                var path = '@Url.Content("~/DWVendor/CreateVendorProduct")' + "?VendorId=" + @Model.VendorId + "&VendorName=" + VendorName
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");


            }
           
        }
    </script>
    <script>
    function CreateProduct(args)
    {
        var str=args.split(',');
        var VendorId=str[0];
        var VendorName=str[1];
        var path = '@Url.Content("~/DWVendor/CreateVendorProduct")' + "?VendorId=" + VendorId + "&VendorName=" + VendorName
        $("#CreateContactDetails").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
        $("#CreateContactDetails").ejDialog("open");
    }
    </script>
   
    <script>
        function toolClickKYC(args) {
            if(args.requestType == "add")
            {
                document.getElementById("Title12").innerHTML = 'Add KYC DOcument';
                var grid = $("#grdkycList").ejGrid("instance");
               var result = this.getSelectedRecords();
               var path = '@Url.Content("~/DWVendor/VendorLibary")' + "?VendorId=" + @Model.VendorId + "&IsKyc=" + "KYC"
               $("#CreateContactDetails").ejDialog({
                   contentUrl: path,
                   contentType: "ajax"
               });
               $("#CreateContactDetails").ejDialog("open");

            }

            return false;
        }
    </script>
   
    <script>
        $(document).ready(function () {

            $('.CreateCertification').click(function (e) {
                var VendorId =  @Model.VendorId;


                var path = '@Url.Content("~/DWVendor/CreateVendorCertificationDetails")' + "?VendorId=" + VendorId 
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");

            });

        });
        </script>

    <script>
        function toolClickCertification(args) {
            if(args.requestType == "add")
            {
                document.getElementById("Title12").innerHTML = 'Add Certification Details';
               var grid = $("#grdCertificationList").ejGrid("instance");

               var path = '@Url.Content("~/DWVendor/CreateVendorCertificationDetails")' + "?VendorId=" + @Model.VendorId 
                $("#CreateContactDetails").ejDialog({
                   contentUrl: path,
                   contentType: "ajax"
               });
                $("#CreateContactDetails").ejDialog("open");

            }
            else
                if (args.requestType == "beginedit")
                {
                    document.getElementById("Title12").innerHTML = 'Edit Certification Details';
                    var grid = $("#grdCertificationList").ejGrid("instance");
                   var result = this.getSelectedRecords();
                   var VendorCertification = result[0]["VendorCertification"];
                   var path = '@Url.Content("~/DWVendor/CreateVendorCertificationDetails")' + "?VendorId=" + @Model.VendorId + "&Certification=" + VendorCertification
                    $("#CreateContactDetails").ejDialog({
                       contentUrl: path,
                       contentType: "ajax"
                   });
                    $("#CreateContactDetails").ejDialog("open");

                }
            return false;
        }
    </script>

    <script>
        function toolClickCompetitor(args) {
            if(args.requestType == "add")
            { 
                document.getElementById("Title12").innerHTML = 'Add Competitor Details';
                    var grid = $("#grdCompetitorList").ejGrid("instance");

               var path = '@Url.Content("~/DWVendor/CreateVendorCompetitorDetails")' + "?VendorId=" + @Model.VendorId + "&CompetitorId=" + 0
               $("#CreateContactDetails").ejDialog({
                   contentUrl: path,
                   contentType: "ajax"
               });
               $("#CreateContactDetails").ejDialog("open");


            }
            else
                if (args.requestType == "beginedit")
                {
                    document.getElementById("Title12").innerHTML = 'Edit Competitor Details';
                    var grid = $("#grdCompetitorList").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var CompetitorId = result[0]["CompetitorId"];
                    var path = '@Url.Content("~/DWVendor/CreateVendorCompetitorDetails")' + "?VendorId=" + @Model.VendorId + "&CompetitorId=" + CompetitorId
                    $("#CreateContactDetails").ejDialog({
                        contentUrl: path,
                        contentType: "ajax"
                    });
                    $("#CreateContactDetails").ejDialog("open");
                }
            return false;
        }
    </script>

    <script>
        $(document).ready(function () {

            $('.CreateCompetitor').click(function (e) {
                var VendorId =  @Model.VendorId;
                var path = '@Url.Content("~/DWVendor/CreateVendorCompetitorDetails")' + "?VendorId=" + VendorId + "&CompetitorId=" + 0
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");

            });

        });
        </script>

    <script>
        function toolClickturnover(args) {
            if(args.requestType == "add")
            { document.getElementById("Title12").innerHTML = 'Add TurnOver Details';
                var grid = $("#grdTurnOverList").ejGrid("instance");

               var path = '@Url.Content("~/DWVendor/CreateVendorTurnoverDetails")' + "?VendorId=" + @Model.VendorId + "&TurnoverYear=" + 0
                $("#CreateContactDetails").ejDialog({

                   contentUrl: path,
                   contentType: "ajax"

               });
                $("#CreateContactDetails").ejDialog("open");


            }
            else
                if (args.requestType == "beginedit")
                {
                    document.getElementById("Title12").innerHTML = 'Edit TurnOver Details';
                    var grid = $("#grdTurnOverList").ejGrid("instance");
                   var result = this.getSelectedRecords();
                   var TurnoverYear = result[0]["TurnoverYear"];
                   var path = '@Url.Content("~/DWVendor/CreateVendorTurnoverDetails")' + "?VendorId=" + @Model.VendorId + "&TurnoverYear=" + TurnoverYear
                   $("#CreateContactDetails").ejDialog({
                       contentUrl: path,
                       contentType: "ajax"
                   });
                   $("#CreateContactDetails").ejDialog("open");
                }
            return false;
        }
    </script>

    <script>
        $(document).ready(function () {

            $('.CreateTurnover').click(function (e) {



               var path = '@Url.Content("~/DWVendor/CreateVendorTurnoverDetails")' + "?VendorId=" + @Model.VendorId + "&TurnoverYear=" + 0
                $("#CreateContactDetails").ejDialog({
                    contentUrl: path,
                    contentType: "ajax"
                });
                $("#CreateContactDetails").ejDialog("open");

            });

        });
    </script>

</div>
    <script>
    $(document).ready(function () {

        $('.EditPersonal').click(function (e) {
               @*@Html.ActionLink(" Create", "CreateVendorContactDetails", new { VendorId = Model.VendorId, ContactName = "" }, new { @class = "modal-link btn-xs btn-info  glyphicon glyphicon-leaf black" })*@
            var VendorId =  @Model.VendorId;


            var path = '@Url.Content("~/DWVendor/CreateVendorProfessionalInfo")' + "?VendorId=" + @Model.VendorId
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
    </script>
    <script>
    $(document).ready(function () {

        $('.CreateLibrary').click(function (e) {
               @*@Html.ActionLink(" Create", "CreateVendorContactDetails", new { VendorId = Model.VendorId, ContactName = "" }, new { @class = "modal-link btn-xs btn-info  glyphicon glyphicon-leaf black" })*@
            var VendorId =  @Model.VendorId;
          

            var path = '@Url.Content("~/DWVendor/VendorLibary")' + "?VendorId=" + VendorId + "&IsKyc=" + "Library"
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
    </script>
<script>
    $(document).ready(function () {

        $('.CreateKYC').click(function (e) {
               @*@Html.ActionLink(" Create", "CreateVendorContactDetails", new { VendorId = Model.VendorId, ContactName = "" }, new { @class = "modal-link btn-xs btn-info  glyphicon glyphicon-leaf black" })*@
            var VendorId =  @Model.VendorId;


            var path = '@Url.Content("~/DWVendor/VendorLibary")' + "?VendorId=" + VendorId + "&IsKyc=" + "KYC"
            $("#CreateContactDetails").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateContactDetails").ejDialog("open");

        });

    });
</script>
<script>

    $(document).ready(function (e) {

        var str = '@(TempData["Message"])'.toString();

        if (str.toString() == "" || str == null) {
            return false;
        }
        else {
            alert('@(TempData["Message"])');
            return false;
        }
    });


</script>
<script type="text/javascript">
    $(document).ready(function () {
        $("#VendorName").ejAutocomplete("selectValueByKey",$('#VendorId').val());
        $('.SaveAll').click(function (e) {          
            var VendorName = $('#VendorName').val();
            var VendorId = $('#VendorId').val();
            if (VendorName.toString() == "") {
                alert("Please Enter Vendor Name");
                return false;
            }              
            if(VendorId == 0)
            {
                var path = "/DWVendor/Checkduplicacy"
                $.ajax({
                    type: 'POST',
                    url: path,
                    dataType: 'json',
                    data: { VendorName:VendorName },
                    success: function (Result) {
                        if(Result)
                        {
                            alert("This Vendor Already Exists.You Can't Create!!")  
                            return false;
                        } 
                        else
                        {
                            $("#VendorForm").unbind('submit').submit();
                        }
                    }
                });
            }
            else
            {
                $("#VendorForm").unbind('submit').submit();
            }               
        });
    });
</script>

@if (Model.VendorId > 0)
{
    <div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-pencil  text-info">
        Edit Vendor Details
    </div>
}
else
{
    <div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-leaf  text-info">
        Create New  Vendor
    </div>
}
<style>
    td {
        padding-right: 15px;
    }
</style>


@using (Html.BeginForm("CreateVendor", "DWVendor", FormMethod.Post, new { Id = "VendorForm" }))
{
    
    <table  style="border-collapse:separate;border-spacing: 0 7px;">

        <tr>

            <td>
                <label for="VendorName">Vendor Name </label>
            </td>
            <td>
                <div class="">
                    @*@Html.TextBoxFor(model => model.VendorName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })*@
                    @Html.EJ().Autocomplete("VendorName").AutoFocus(true).ShowPopupButton(true).Datasource((IEnumerable<SmartSys.BL.DW.VendorListModel>)ViewBag.VendorList).AutocompleteFields(f => f.Text("VendorName").Key("VendorId")).Width("400").ClientSideEvents(e => e.Select("onSelect"))                    
                    @Html.Hidden("VendorId", null, new { @id = "VendorId" })
                </div>

            </td>



            <td>
                <label for="Region">Region </label>
            </td>


            <td>
                <div class="">
                    @Html.DropDownListFor(model => model.Region, new List<SelectListItem>
                       {
                             new SelectListItem() {Text = "East", Value="East"},
                             new SelectListItem() {Text = "West", Value="West"},
                             new SelectListItem() {Text = "North", Value="North"},
                             new SelectListItem() {Text = "South", Value="South"}

                       }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Region)
                </div>
            </td>

        </tr>
        <tr>

            <td>
                <label for="IsActive">IsActive </label>
            </td>
            <td>
                <div class="">
                    @Html.EditorFor(model => model.IsActive, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })


                </div>
            </td>
            <td>
                <label for="IsActive">IsManufacturer </label>
            </td>
            <td>
                <div class="">
                    @Html.EditorFor(model => model.IsManufacturer, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IsManufacturer, "", new { @class = "text-danger" })


                </div>
            </td>
            <td>
                <label for="IsActive">Authorized Dealer </label>
            </td>
            <td>
                <div class="">
                    @Html.EditorFor(model => model.AuthorizedDealer, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AuthorizedDealer, "", new { @class = "text-danger" })


                </div>
            </td>
        </tr>
    </table>
    <br>
    if (Model.VendorId > 0)
    {
        <div style="width:100%">

            @{Html.EJ().Tab("defaultTabs").ShowCloseButton(true).Items(data =>
           {               
              data.Add().ID("ProfessionalInfo").Text("Professional Info").ContentTemplate(
                @<div>
                     <table>
                         <tr>
                             <td>
                                 <button class="btn-xs btn-info glyphicon glyphicon-leaf EditPersonal" type="button"> Edit</button>
                             </td>
                         </tr>
                     </table>
                   
                     <table style="border-collapse:separate;border-spacing: 0 5px;">
                         <tr>
                             <td>
                                 <label for="E-Mail Id">E-Mail Id </label>
                             </td>
                             <td width="320px">
                                 @Html.TextBoxFor(model => model.emailId, new { @readonly = "readonly", @class = "form-control" })
                             </td>
                         </tr>
                     </table>
                     <table style="border-collapse:separate;border-spacing: 0 5px;">
                         <tr>
                             <td width="75px">
                                 <label for="VAT">VAT</label>
                             </td>
                             <td width="300px">
                                 @Html.TextBoxFor(model => model.VAT, new { @readonly = "readonly", @class = "form-control" })
                             </td>
                             <td>
                                 <label for="PAN">PAN</label>
                             </td>
                             <td width="300px">
                                 @Html.TextBoxFor(model => model.PAN, new { @readonly = "readonly", @class = "form-control" })
                             </td>
                             <td>
                                 <label for="CST">CST</label>
                             </td>
                             <td width="300px">
                                 @Html.TextBoxFor(model => model.CST, new { @readonly = "readonly", @class = "form-control" })
                             </td>
                         </tr>

                         <tr>
                             <td>
                                 <label for="TAN">TAN</label>
                             </td>
                             <td>
                                 <div class="" style="color:#38172d">
                                     @Html.TextBoxFor(model => model.TAN, new { @readonly = "readonly", @class = "form-control" })
                                 </div>
                             </td>
                             <td>
                                 <label for="Excise No">Excise No</label>
                             </td>
                             <td>
                                 <div class="" style="color:#38172d">
                                     @Html.TextBoxFor(model => model.ExciseNo, new { @readonly = "readonly", @class = "form-control" })
                                 </div>
                             </td>

                             <td>
                                 <label for="Excise Range">Excise Range</label>
                             </td>
                             <td>
                                 <div class="" style="color:#38172d">
                                     @Html.TextBoxFor(model => model.ExciseRange, new { @readonly = "readonly", @class = "form-control" })
                                 </div>
                             </td>
                         </tr>
                     </table>
                     <table style="border-collapse:separate;border-spacing: 0 5px;">
                         <tr>

                             <td>
                                 <label for="Excise Division">Excise Division:</label>
                             </td>
                             <td width="255px">
                                 @Html.TextBoxFor(model => model.ExciseDivision, new { @readonly = "readonly", @class = "form-control" })

                             </td>
                             <td>
                                 <label for="Excise CommissionRate">Exc. Commission Rate:</label>
                             </td>
                             <td width="220px">
                                 @Html.TextBoxFor(model => model.ExciseCommissionRate, new { @readonly = "readonly", @class = "form-control" })
                             </td>

                             <td width="100px">
                                 <label for="Website">Website:</label>
                             </td>
                             <td width="300px">
                                 @Html.TextBoxFor(model => model.Website, new { @readonly = "readonly", @class = "form-control" })
                             </td>
                         </tr>
                     </table>
                     <table style="border-collapse:separate;border-spacing: 0 5px;">
                         <tr>

                             <td>
                                 <label for="Remark">Remark:</label>
                             </td>
                             <td>
                                 @Html.TextAreaFor(model => model.Remark, new { @style = "width:600px", @readonly = "readonly", @class = "form-control" })
                             </td>
                         </tr>
                     </table>
                </div>);
               data.Add().ID("Contact").Text("Contact").ContentTemplate(
                @<div>
                    <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateContact" type="button"> Create</button>
                   
                    @if (Model.VendorContactLst.Count > 0)
                    {
                        <div style="position:relative">
                            @(Html.EJ().Grid<SmartSys.BL.DW.VendorContactDetailsModel>("grdContactList")
         .Datasource(Model.VendorContactLst)
            .AllowPaging()
            .AllowSorting()
            .EnableHeaderHover()
            .AllowResizing()
            .AllowScrolling()

         .PageSettings(p => { p.PageSize(20); })
         .EditSettings(e => e.AllowAdding().AllowEditing())
            .ContextMenuSettings(contextMenu =>
            {
                contextMenu.EnableContextMenu();
                contextMenu.DisableDefaultItems();
                contextMenu.CustomContextMenuItems(c =>
                {
                    c.AddItem("Add1", "Add Record");
                    c.AddItem("Edit1", "Edit Record");
                    c.AddItem("Select_Usser123", "Select User");
                });

            })

            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })

        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("VendorContactId").HeaderText("Vendor Contact Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("ContactName").HeaderText("Contact Name").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("Designation").HeaderText("Designation").Width(160).Add();
            col.Field("Email").HeaderText("Email").Width(160).Add();
            col.Field("MobileNo").HeaderText("Mobile No").Width(160).Add();
            col.Field("Experties").HeaderText("Experties").Width(160).Add();
            col.Field("Qualification").HeaderText("Qualification").Width(160).Add();
            col.Field("BirthDateStr").HeaderText("Birth Date").Width(160).Add();
            col.Field("UserId").HeaderText("UserId").Width(160).Add();
            col.Field("UserName").HeaderText("User Name").Width(160).Add();
            col.Field("ModifiedBy").HeaderText("Modified By").Width(180).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickContact");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickContact");
            })


                            )
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <label>Sorry! There is No Information about Contact Details !!!</label>
                        </div>
                    }
                </div>);
               data.Add().ID("BankDetails").Text("Bank Details").ContentTemplate(
                @<div>
                     <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateBank" type="button"> Create</button>
                    @if (Model.VendorBankDetailLst.Count > 0)
                    {

                        <div style="position:relative">
                            @(Html.EJ().Grid<SmartSys.BL.DW.VendorBankDetailModel>("grdBankList")
         .Datasource(Model.VendorBankDetailLst)
            .AllowFiltering()
                .AllowPaging()
                .PageSettings(page => { page.PageSize(20); })
                .AllowSorting()
                .EnableHeaderHover()
                .AllowResizing()
                .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                .EditSettings(e => e.AllowAdding().AllowEditing())
            .ContextMenuSettings(contextMenu =>
            {
                contextMenu.EnableContextMenu()
                      .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                      .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));

            })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("BankName").HeaderText("Bank Name").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("AccountNo").HeaderText("Account No").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("Limit").HeaderText("Limit").Width(160).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickBank");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickBank");
            })


                            )
                        </div>
                     
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <label>Sorry! There is No Information about Bank Details !!!</label>
                        </div>

                    }

                </div>);
               data.Add().ID("Address").Text("Address").ContentTemplate(
                @<div>
                     <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateAddress" type="button"> Create</button>
                    @if (Model.AddressList.Count > 0)
                    {

                        <div style="position:relative">
                            @(Html.EJ().Grid<SmartSys.BL.DW.VendorAddressModel>("grdAddressList")
         .Datasource(Model.AddressList)
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
          .EditSettings(e => e.AllowAdding().AllowEditing())
            .ContextMenuSettings(contextMenu =>
            {
                contextMenu.EnableContextMenu()
                     .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                      .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));

            })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("AddressId").HeaderText("Address Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Line1").HeaderText("Line 1").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("Line2").HeaderText("Line 2").Width(160).Add();
            col.Field("LandMark").HeaderText("Land Mark").Width(180).Add();
            col.Field("City").HeaderText("City").Width(160).Add();
            col.Field("State").HeaderText("State").Width(160).Add();
            col.Field("Country").HeaderText("Country").Width(160).Add();
            col.Field("Pin").HeaderText("Pin").Width(160).Add();
            col.Field("isPrimary").HeaderText("isPrimary").Width(180).Add();
            col.Field("Description").HeaderText("Description").Width(180).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickAddress");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickAddress");
            })


                            )
                        </div>                     
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <label>Sorry! There is No Information about Address Details !!!</label>
                        </div>

                    }
                </div>);
               data.Add().ID("Library").Text("Library").ContentTemplate(
                @<div>
                  
                                <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateLibrary" type="button"> Create</button>
                    @if (Model.VendorLibaryList.Count > 0)
                    {
                      <div style="position:relative">
                            @(Html.EJ().Grid<SmartSys.BL.DW.VendorLibaryModel>("grdLibraryList")
         .Datasource(Model.VendorLibaryList)
            .AllowPaging()
            .AllowSorting()
            .EnableHeaderHover()
            .AllowResizing()
            .AllowScrolling()
            .PageSettings(p => { p.PageSize(20); })
          .EditSettings(e => e.AllowAdding().AllowEditing())
            .ContextMenuSettings(contextMenu =>
            {
                contextMenu.EnableContextMenu()
                      .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord));

            })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);

                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("DocumentTitle").HeaderText("Document Title").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Description").HeaderText("Description").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("DocumentPath").HeaderText("Document Path").Width(160).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();
            col.HeaderText("Open").Template("#OpenLibrary").TextAlign(TextAlign.Center).AllowFiltering(false).Width(50).Add();

        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickLibrary");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickLibrary");
            })


                            )
                        </div>

                      
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <label>Sorry! There is No Information about Address Details !!!</label>
                        </div>

                    }
                </div>);
               data.Add().ID("Product").Text("Product").ContentTemplate(
                @<div>
                     <a onclick="CreateProduct('@Model.VendorId,@Model.VendorName')" class="btn-xs btn-info  glyphicon glyphicon-leaf"> Create</a>
                    @if (Model.ProductList.Count > 0)
                    {
                        <div style="position:relative">
                            @(Html.EJ().Grid<SmartSys.BL.DW.VendorProductModel>("grdProductList")
         .Datasource(Model.ProductList)
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
         .ContextMenuSettings(contextMenu =>
         {
             contextMenu.EnableContextMenu();
             contextMenu.DisableDefaultItems();
             contextMenu.CustomContextMenuItems(c =>
             {
                 c.AddItem("Add_Record", "Add Record");
               
             });

         })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("VendorId").HeaderText("Vendor Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("VendorName").HeaderText("Vendor Name").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("EquipmentId").HeaderText("Equipment Id").Width(160).Add();
            col.Field("EquipmentName").HeaderText("Equipment Name").Width(180).Add();
            col.HeaderText("Delete").Template("#DeleteProduct").TextAlign(TextAlign.Center).AllowFiltering(false).Width(50).Add();

        })
            .ClientSideEvents(eve =>
            {
               
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickProduct");
            })


                            )
                        </div>

                     
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <label>Note: There are no items under this Customer !!!!</label>
                        </div>
                    }
                </div>);
               data.Add().ID("Others").Text("Others").ContentTemplate(
                @<div>
                    <div>
                       
                                    <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateTurnover" type="button"> Add Turnover</button>
                     
                        @if (Model.VendorTurnoverList.Count > 0)
                        {
                            <div style="position:relative">
                                @(Html.EJ().Grid<SmartSys.BL.DW.VendorTurnoverModel>("grdTurnOverList")
         .Datasource(Model.VendorTurnoverList)
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
          .EditSettings(e => e.AllowAdding().AllowEditing())
          .ContextMenuSettings(contextMenu =>
          {
              contextMenu.EnableContextMenu()
                   .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));

          })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("TurnoverYear").HeaderText("Turnover Year").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Turnover").HeaderText("Account No").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("ProjectedTurnover").HeaderText("Projected Turnover").Width(160).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickturnover");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickturnover");
            })


                                )
                            </div>
                            
                          
                        }
                        else
                        {
                            <div class="alert alert-info" role="alert">
                                <label>Sorry! There is No Information about Turnover Details !!!</label>
                            </div>

                        }
                    </div>

                     <div>
                         <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateCertification" type="button"> Add Certification</button>
                        
                         @if (Model.VendorCertificationList.Count > 0)
                         {
                            <div style="position:relative">
                                @(Html.EJ().Grid<SmartSys.BL.DW.VendorCertificationModel>("grdCertificationList")
         .Datasource(Model.VendorCertificationList)
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
          .EditSettings(e => e.AllowAdding().AllowEditing())
          .ContextMenuSettings(contextMenu =>
          {
              contextMenu.EnableContextMenu()
                   .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));

          })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("VendorCertification").HeaderText("Vendor Certification").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("CertificateDateStr").HeaderText("Certificate Date").Format("{0:MM/dd/yyyy}").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickCertification");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickCertification");
            })
                                )
                            </div>
                             @*<div id="gridEvent">
                                 @gridCertificationDetail.GetHtml(
                                         tableStyle: "webgrid",
                                        alternatingRowStyle: "webgrid-alt",
                                         headerStyle: "webgrid-header",
                                         selectedRowStyle: "webgrid-select",
                                        mode: WebGridPagerModes.All,
                                        firstText: "<<First",
                                        previousText: "<Previous",
                                        nextText: ">Next",
                                        lastText: ">>Last",
                                        columns: new[]{
                                        gridCertificationDetail.Column("VendorCertification","Customer Certification"),
                                          gridCertificationDetail.Column("CertificateDateStr","Certificate Date"),
                                          gridCertificationDetail.Column("CreatedBy","Created By",canSort:false),
                                        gridCertificationDetail.Column("CreatedDate","Created Date"),
                                   
                                         gridCertificationDetail.Column(header:"Edit",format:(itemCerti) => Html.ActionLink(" Edit","CreateVendorCertificationDetails","DWVendor",new {VendorId = Model.VendorId,Certification=itemCerti.VendorCertification},new{ @class="modal-link btn-xs btn-success  glyphicon glyphicon-pencil"}))

                                          })
                             </div>*@
                         }
                         else
                         {
                             <div class="alert alert-info" role="alert">
                                 <label>Sorry! There is No Information about Customer Certification Details !!!</label>
                             </div>

                         }
                     </div>

                    <div>
                        <table>
                            <tr>
                                <td>
                                    <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateCompetitor" type="button"> Add Competitor</button>
                                </td>
                            </tr>
                        </table>
                        @if (Model.VendorCompetitorList.Count > 0)
                        {
                            <div style="position:relative">
                                @(Html.EJ().Grid<SmartSys.BL.DW.VendorCompetitorModel>("grdCompetitorList")
         .Datasource(Model.VendorCompetitorList)
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
         .EditSettings(e => e.AllowAdding().AllowEditing())
          .ContextMenuSettings(contextMenu =>
          {
              contextMenu.EnableContextMenu()
               .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));

          })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                });
            })
        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("CompetitorId").HeaderText("Competitor Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("CompetitorName").HeaderText("Competitor Name").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("Region").HeaderText("Region").Width(160).Add();
            col.Field("IsActive").HeaderText("Active").Width(160).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();


        })
            .ClientSideEvents(eve =>
            {
                eve.ActionBegin("toolClickCompetitor");
                eve.ActionComplete("complete");
                eve.ContextClick("contextclickCompetitor");
            })


                                )
                            </div>


                          
                        }
                        else
                        {
                            <div class="alert alert-info" role="alert">
                                <label>Sorry! There is No Information about Customer Competitor Details !!!</label>
                            </div>

                        }
                    </div>

                </div>);
               data.Add().ID("KYCDOCS").Text("KYC Documents").ContentTemplate(
                    @<div>
                        <table>
                            <tr>
                                <td>
                                    <button class="btn-xs btn-info glyphicon glyphicon-leaf CreateKYC" type="button"> Create</button>
                                </td>
                            </tr>
                        </table>
                @if (Model.VendorKYCList.Count > 0)
                {
                    <div style="position:relative">
                        @(Html.EJ().Grid<SmartSys.BL.DW.VendorLibaryModel>("grdkycList")
         .Datasource(Model.VendorKYCList)

        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
        .EditSettings(e => e.AllowAdding().AllowEditing())
          .ContextMenuSettings(contextMenu =>
          {
              contextMenu.EnableContextMenu()
                       .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord));


          })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);

                });
            })

        .EnableAltRow(true)
        .AllowSorting(true)
        .Columns(col =>
        {
            col.Field("DocumentTitle").HeaderText("DocumentTitle").TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Description").HeaderText("Description").TextAlign(TextAlign.Center).Width(150).Add();
            col.Field("DocumentPath").HeaderText("DocumentPath").Width(160).Add();
            col.Field("CreatedBy").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(180).Visible(true).Add();
            col.HeaderText("Open").Template("#OpenDoc").TextAlign(TextAlign.Center).AllowFiltering(false).Width(50).Add();


        })

         .ClientSideEvents(eve =>
         {   eve.ActionBegin("toolClickKYC");
             eve.ActionComplete("complete");
             eve.ContextClick("contextclickKYC");          })

                        )
                    </div>
                   
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        <label>Sorry! There is No Information about Address Details !!!</label>
                    </div>

                }
            </div>);

           })
           .EnablePersistence(true)
           .Render();}
        </div>
        <br>
        <table  style="border-collapse:separate;border-spacing: 0 5px;">
            <tr>
                <td>
                    <label for="CreatedByName">Created By </label>
                </td>
                <td>
                    <div class="">
                        @Html.TextBoxFor(model => model.CreatedByName, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.CreatedByName, "", new { @class = "text-danger" })
                    </div>
                </td>
                <td>
                    <label for="CreatedDate">Created Date </label>
                </td>
                <td>
                    <div class="">
                        @Html.TextBoxFor(model => model.CreatedDate, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.ModifiedDate, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <label for="ModifiedByName">Modified By </label>
                </td>
                <td>
                    <div class="">
                        @Html.TextBoxFor(model => model.ModifiedByName, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.ModifiedByName, "", new { @class = "text-danger" })
                    </div>
                </td>
                <td>
                    <label for="ModifiedDate">Modified Date </label>
                </td>
                <td>
                    <div class="">

                        @Html.TextBoxFor(model => model.ModifiedDate, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.ModifiedDate, "", new { @class = "text-danger" })
                    </div>
                </td>
            </tr>
        </table>
                }

       <table>
        <tr>
            <td>
                <button style="margin:10px" class="btn-xs btn-info glyphicon glyphicon-hand-left" type="button" onclick="location.href = 'VendorList';" );"> Back</button>
                    <button type="button" class="SaveAll btn-xs buttonCss btn-info glyphicon glyphicon-save"> Save</button>
            </td>
        </tr>

    </table>
 
}
<script id="OpenLibrary" type="text/x-jsrender">
    <a class="btn-xs btn-info  glyphicon glyphicon-download" href="/DWVendor/VendorDownload?VendorId=@Model.VendorId&amp;DocumentPath={{:DocumentPath}}">  Open</a>
</script>
<script id="DeleteProduct" type="text/x-jsrender">
    <a class="btn-xs btn-danger  glyphicon glyphicon-trash" href="/DWVendor/DeleteVendorEquipment?VendorId=@Model.VendorId&amp;EquipmentId={{:EquipmentId}}">  Delete</a>
</script>
<script type="text/x-jsrender" id="OpenDoc">
    <a class="btn-xs btn-info  glyphicon glyphicon-download black" href="/DWVendor/VendorDownload?VendorId=@Model.VendorId&amp;DocumentPath={{:DocumentPath}}"> Open</a>
</script>