@model IEnumerable<SmartSys.BL.SysDBCon.SysDBConModel>



<div class="page-header glyphicon glyphicon-link  text-info ">
    Connection Information List
</div>
<div style="position:relative">
    @(Html.EJ().Grid<SmartSys.BL.SysDBCon.SysDBConModel>("grdConnectionList")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
       .PageSettings(p => { p.PageSize(20); })
        .EnableAltRow(true)
                    .ContextMenuSettings(contextMenu =>
                                             {
                                                 contextMenu.EnableContextMenu()
                                                .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));
                                                                                                  
                                             }) 
            //.EnablePersistence(true)
        .Columns(col =>
        {
            col.Field("ConnectionId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("ServerName").HeaderText("Server Name").ValidationRules(v => v.AddRule("required", true)).Width(250).Add();
            col.Field("Port").HeaderText("Port").ValidationRules(v => v.AddRule("required", true)).Width(140).Add();
            col.Field("DBName").HeaderText("DB Name").TextAlign(TextAlign.Left).Width(180).Add();
            col.Field("UserName").HeaderText("User Name ").TextAlign(TextAlign.Left).Width(180).Add();
            col.Field("Password").HeaderText("Password ").Width(180).Add();
            col.Field("ConnectionType").HeaderText("Connection Type ").Width(150).TextAlign(TextAlign.Center).Add();
            col.HeaderText("Edit").IsUnbound(true).TextAlign(TextAlign.Center).Width(120).AllowFiltering(false).Template("#BtnTemplate").Add();
        })
                     .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })  
    )
</div>
<script id="BtnTemplate" type="text/x-jsrender">
    <a class="btn btn-info  glyphicon glyphicon-link" href="/DhFeed/AddConnectionList?ConnectionId={{:ConnectionId}}">AddAction </a>
</script>
<div>
    <a class="btn btn-warning" href="/DhFeed/CreateFeed?iFeedID=0">Cancel</a>
</div>
<script>
    function contextclick(args) {

        if (args.text == "Edit Record") {
                var tempData = args.text;
                var grid = $("#grdConnectionList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var ConnectionId = result[0]["ConnectionId"];
                var path = '@Url.Content("~/DhFeed/AddConnectionList")' + "?ConnectionId=" + ConnectionId
                event.preventDefault();
                window.location.replace(path);

            }

    }

</script>