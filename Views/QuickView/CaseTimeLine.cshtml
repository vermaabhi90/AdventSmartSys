@model  SmartSys.BL.ProViews.GetTaskdurationByStatusModel

@using System.Web.Mvc.Html

<div class="page-header glyphicon glyphicon-leaf  text-info ">
    <i style="color:red">Created Date</i> @ViewBag.TimeDuration[0].CreatedDate
</div>
<table style="margin-left:50px">
    <tr>

        <td style="margin-left:10px">

            <a class="btn-xs btn-info" style="background-color:Yellow; color:Green">Reviewed Time</a>
            <a style=""><span class="glyphicon glyphicon-info-sign"></span><i> Time: @ViewBag.TimeDuration[0].ReviewedEndTime <span style="color:Red">Minutes</span><br /> Date: @ViewBag.TimeDuration[0].ReviewedDate <br /></i></a>
        </td>
        <td width="20px" />
        <td style="margin-left:10px">
            <a class="btn-xs btn-info" style="background-color:#7C06B7; color:White">Approved Time</a>
            <a style=""><span class="glyphicon glyphicon-info-sign"></span><i> Time: @ViewBag.TimeDuration[0].ApprovedTime <span style="color:Red">Minutes</span> <br /> Date: @ViewBag.TimeDuration[0].ApprovedDate<br /></i></a>
        </td>
        <td width="20px" />
        <td style="margin-left:10px">
            <a class="btn-xs btn-info" style="background-color:#9B9CFB; color:White">Inprogress Time</a>
            <a style=""><span class="glyphicon glyphicon-info-sign"></span><i> Time: @ViewBag.TimeDuration[0].InprogressTime <span style="color:Red">Minutes</span><br /> Date: @ViewBag.TimeDuration[0].InprogressDate <br /></i></a>
        </td>
        <td width="20px" />
        <td style="margin-left:10px">
            <a class="btn-xs btn-info" style="background-color:#E94649; color:White">Complete Time</a>
            <a style=""><span class="glyphicon glyphicon-info-sign"></span><i> Time: @ViewBag.TimeDuration[0].CompleteTime <span style="color:Red">Minutes</span><br /> Date: @ViewBag.TimeDuration[0].CompleteDate  <br /></i></a>
        </td>
    </tr>
</table>
<div id="linearframe" align="center">
    @(Html.EJ().LinearGauge("ScaleGauge").LabelColor("#8c8c8c").Width(1000)
                    .ClientSideEvents(cli => cli.Load("loadGaugeTheme").DrawLabels("DrawLabel"))
                    .Orientation(Orientation.Horizontal)
                    .Tooltip(tip => tip.ShowCustomLabelTooltip(true).ShowLabelTooltip(true).TemplateID("Tooltip"))
                    .Scales(s =>
                    {
                        s.Width(50)

                            .BackgroundColor("transparent")
                         .ShowBarPointers(true)
                         .Border(bor => bor.Color("transparent").Width(0))
                         .ShowRanges(true)

                         .ShowMarkerPointers(false)
                         .Length(500)
                         .Position(pos => { pos.X(10).Y(10); })
                           .MarkerPointers(mp => { mp.Value(1.2).Length(10).Width(10).MarkerBackgroundColor("#4D4D4D").Border(bor => bor.Color("4D4D4D")).Add(); })
                          .CustomLabels(cslbl => { cslbl.Value("Fuel Cost $ / L").Color("#fc0606").Font(fnt => fnt.Size("12px").FontStyle("bold").FontFamily("Arial")).Position(pos => pos.X(48).Y(100)).Add(); })
                         //.Labels(lbl => { lbl.UnitText("% ").UnitTextPlacement(UnitTextPlacement.Front).Font(fnt => { fnt.Size("11px").FontFamily("Segoe UI").FontStyle("bold"); }).DistanceFromScale(dfs => dfs.X(-20)).Add(); })
                         // .Labels(lbl => { lbl.Font(fnt => { fnt.Size("11px").FontFamily("Segoe UI").FontStyle("bold"); }).DistanceFromScale(dfs => dfs.X(-12)).Add(); })
                         .BarPointers(barptr => { barptr.BarPointerValue(1000).Width(3).BarPointerBackgroundColor("Green").Add(); })
                         .Ticks(tic => { tic.Type(TickType.MajorInterval).Width(1).Color("Red").Add(); })
                            .Ranges(rng =>

                            {

                                rng.EndValue(Model.ReviewedTime).StartValue(0).DistanceFromScale(20).RangeBackgroundColor("Yellow").Border(bor => bor.Color("Yellow")).StartWidth(40).EndWidth(40).Add();
                                rng.EndValue(Model.ApproveEndTime).StartValue(Model.ReviewedTime).DistanceFromScale(20).RangeBackgroundColor("#7C06B7").Border(bor => bor.Color("#7C06B7")).StartWidth(40).EndWidth(40).Add();
                                rng.EndValue(Model.InprogressEndTime).StartValue(Model.ApproveEndTime).DistanceFromScale(20).RangeBackgroundColor("#9B9CFB").Border(bor => bor.Color("#9B9CFB")).StartWidth(40).EndWidth(40).Add();
                                rng.EndValue(Model.CompleteEndTime).StartValue(Model.InprogressEndTime).DistanceFromScale(20).RangeBackgroundColor("#E94649").Border(bor => bor.Color("#E94649")).StartWidth(40).EndWidth(40).Add();

                            })
                        .Direction(Directions.Clockwise)
                         .Add();
                    }))
</div>

@Html.EJ().ScriptManager()


<style>
        a {
            position: relative;
            cursor: pointer;
            display: inline-block;
        }

            a > i {
                text-align: left;
                line-height: 100%;
                color: black;
                background: #ffffff;
                background-clip: padding-box;
                font-size: 12px;
                font-style: normal;
                border: 2px solid #111;
                border: 2px solid rgba(0, 0, 0, 0.5);
                border-radius: 3px;
                position: absolute;
                width: 250px;
                left: 50%;
                margin-left: -115px;
                padding: 15px 0;
                bottom: 100%;
                margin-bottom: 15px;
                visibility: hidden;
                opacity: 0;
                -webkit-transition: opacity 0.5s linear;
                -moz-transition: opacity 0.5s linear;
                -ms-transition: opacity 0.5s linear;
                -o-transition: opacity 0.5s linear;
                transition: opacity 0.5s linear;
            }

                a > i:before, a > i:after {
                    content: "";
                    position: absolute;
                    border-left: 10px solid transparent;
                    border-right: 10px solid transparent;
                    top: 100%;
                    left: 50%;
                    margin-left: -10px;
                }

                a > i:before {
                    border-top: 10px solid #111;
                    border-top: 10px solid rgba(0, 0, 0, 0.5);
                    margin-top: 5px;


    a > :a
                e

            border t p
            x solid #DD ;
        marg
            top: -2p ;
        z


    }

    a:hover > i {
        visibility: visible;
        opacity: 5;
    }
</style>
