@model IEnumerable<SmartSys.BL.Sysadmin.BusinessLineModel>
@using Syncfusion.JavaScript.Models
@{
    ViewBag.Title = "GetList";
}

<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Business Line List
</div>

<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "Create", null, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>
<div style="position:relative">
    @(Html.EJ().Grid<SmartSys.BL.RGSGenModel>("grdBuisnessLineList")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
        
        .EnableAltRow(true)
           .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportBussinessLineLst")))
         .ContextMenuSettings(contextMenu =>
         {
             contextMenu.EnableContextMenu();
             contextMenu.DisableDefaultItems();
             contextMenu.CustomContextMenuItems(c =>
             {
                 c.AddItem("Add_Record", "Add Record");
                 c.AddItem("Edit1", "Edit Record");
             });

         })
        //.EnablePersistence(true)
        .Columns(col =>
        {
            col.Field("BusinessLineId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("BusinessLineName").HeaderText("Business Line").ValidationRules(v => v.AddRule("required", true)).Width(150).Add();
            col.Field("Description").HeaderText("Description").TextAlign(TextAlign.Left).Width(100).Add();
            col.Field("CreatedByName").HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
            col.Field("ModifiedByName").HeaderText("Modified By").Width(200).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
            col.HeaderText("Edit").Template("#edit").TextAlign(TextAlign.Center).Width(90).AllowFiltering(false).Add();

        })
                 .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
    )
</div>
<script id="edit" type="text/x-jsrender">
    <a class="btn-xs btn-info  glyphicon glyphicon-pencil" href="/BusinessLine/Edit?BusinessLineId={{:BusinessLineId}}"></a>
</script>
<script>
    function contextclick(args) {

        if (args.text == "Add Record") {
            var path = '@Url.Content("~/BusinessLine/Create")'
            event.preventDefault();
            window.location.replace(path);
        }
        else
            if (args.text == "Edit Record") {
                var tempData = args.text;
                var grid = $("#grdBuisnessLineList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var BusinessLineId = result[0]["BusinessLineId"];
                var path = '@Url.Content("~/BusinessLine/Edit")' + "?BusinessLineId=" + BusinessLineId
                event.preventDefault();
                window.location.replace(path);

            }

    }

</script>
