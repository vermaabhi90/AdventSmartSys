@model SmartSys.BL.Enquiry.EnquiryModel

@{
    ViewBag.Title = "Customer Enquiry";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    DW Customer Enquiry List For Quotation
</div>
<br />
@*@Html.ActionLink(" Create", "CretaeCustomerEnquiry", new { EnqId = 0 }, new { @class = "btn btn-info glyphicon glyphicon-leaf" })*@
<script>
    $(document).ready(function (e) {
        var str = '@(TempData["Message"])'.toString();
        if (str.toString() == "" || str == null)
        {
            return false;
        }
        else
        {
            alert('@(TempData["Message"])');
        }
    });
</script>
<div style="position:relative">
    @(Html.EJ().Grid<object>("grdDWEnquiry")
                .Datasource((IEnumerable<object>)  @Model.lstEnquiry)
                .Datasource(ds => ds.URL("/Enquiry/QuotationList").Offline(true))
        .AllowFiltering()
        .AllowPaging()
        .AllowSorting()
                .PageSettings(p => { p.PageSize(20); })
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.ExcelExport);
        }))
               .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportQuotationDetailList")))
     .ToolbarSettings(toolbar => { toolbar.ShowToolbar().ToolbarItems(items => { items.AddTool(ToolBarItems.Search); }); })
        .EnableAltRow(true)

                   //.ContextMenuSettings(contextMenu =>
                   //{
                   //    contextMenu.EnableContextMenu()
                   //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Cancel))
                   //    .CustomContextMenuItems(new List<string> {  "Quotation preparation" , "Close Enquiry" , "FollowUp History" });
                   //})
                   .ContextMenuSettings(contextMenu =>
                   {
                       contextMenu.EnableContextMenu();
                       contextMenu.DisableDefaultItems();
                       contextMenu.CustomContextMenuItems(c =>
                       {
                           c.AddItem("Quotation_preparation", "Quotation preparation");
                           c.AddItem("Close_Enquiry", "Close Enquiry");
                           c.AddItem("FollowUp_History", "FollowUp History");
                       });

                   })
                  .ClientSideEvents(eve => { eve.ContextOpen("contextopen"); })
                .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
        .Columns(col =>
        {
            col.Field("QuotationId").HeaderText("Quot Id").TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("EnqId").HeaderText("Enq Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("EnqNumber").HeaderText("Enq Num").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(60).Add();
            col.Field("QuotationNumber").HeaderText("Quot Num").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(70).Add();
            col.Field("CompCode").HeaderText("Company").TextAlign(TextAlign.Left).Width(60).Add();
            col.Field("QuotaionCost").HeaderText("Total Cost").TextAlign(TextAlign.Right).Width(80).Add();
            col.Field("EnqDate").HeaderText("Enq Date").Format("{0:MM/dd/yyyy }").TextAlign(TextAlign.Left).Width(80).Add();
            col.Field("CustomerName").HeaderText("Customer Name").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(150).Add();
            col.Field("StatusStr").HeaderText("Status").TextAlign(TextAlign.Left).Width(120).Add();
            col.Field("Status").HeaderText("Status").Visible(false).TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(120).Add();
            col.Field("CustomerId").HeaderText("CustId").Visible(false).TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(120).Add();
            col.Field("ModifiedBy").AllowEditing(false).HeaderText("Modified By").Width(120).Add();
            col.Field("ModifiedDate").AllowEditing(false).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(120).Add();
            col.Field("EnqId").HeaderText("ID").Visible(false).TextAlign(TextAlign.Center).Width(60).Add();
        })
    )
</div>
<script>
    function contextclick(args) {

        if (args.text == "Quotation preparation")
        {
            var path = '@Url.Action("CreateQuotation")';
            var tempData = args.text;
            var grid = $("#grdDWEnquiry").ejGrid("instance");
            var result = this.getSelectedRecords();
            var EnqId = result[0]["EnqId"];
            var QuotationId = result[0]["QuotationId"];
            var StatusId = result[0]["Status"];
            var CustomerId = result[0]["CustomerId"];
            var CustomerName = result[0]["CustomerName"];
            var EnqNumber = result[0]["EnqNumber"];
            var EnqDate = result[0]["EnqDate"];
            if (QuotationId == 0)
            {
                $.ajax({
                    type: 'POST',
                    url: path, // we are calling json method
                    dataType: 'json',
                    data: { ItemId: 0, CustomerId: CustomerId, EnqId: EnqId },
                    success: function (Errorcode) {
                        var path = '@Url.Content("~/Enquiry/PrepareQuotation")' + "?EnqId=" + EnqId + "&QuotId=" + Errorcode  //+ "&CustomerName=" + CustomerName + "&EnqNumber=" + EnqNumber + "&StatusId=" + StatusId
                        event.preventDefault();
                        window.location.replace(path);
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
            }
            else
            {
                var path = '@Url.Content("~/Enquiry/PrepareQuotation")' + "?EnqId=" + EnqId + "&QuotId=" + QuotationId  //+ "&CustomerName=" + CustomerName + "&EnqNumber=" + EnqNumber + "&StatusId=" + StatusId
                event.preventDefault();
                window.location.replace(path);
            }
        }
        else if (args.text == "Close Enquiry") {
            var tempData = args.text;
            var grid = $("#grdDWEnquiry").ejGrid("instance");
            var result = this.getSelectedRecords();
            var EnqId = result[0]["EnqId"];
            var Status = result[0]["Status"];
           // var Remark=result[0][""]
            //alert(Status);
            var path = '@Url.Content("~/Enquiry/CloseEnq")' + "?EnqId=" + EnqId + "&Source=Quotation" + "&Status=" + Status 
            $("#CloseEnquiry").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CloseEnquiry").ejDialog("open");
        }
        else if (args.text == "FollowUp History") {
            var tempData = args.text;
            var grid = $("#grdDWEnquiry").ejGrid("instance");
            var result = this.getSelectedRecords();
            var QuotationId = result[0]["QuotationId"];
            var StatusId = result[0]["StatusStr"];           
            if (QuotationId > 0 && StatusId == 'Quotation Sent To the Customer')
            {
                 var path = '@Url.Content("~/Enquiry/FollowUpHistory")' + "?QuotationId=" + QuotationId
            $("#CreateFollowUpHistory").ejDialog({

                    contentUrl: path,
                    contentType: "ajax"
                });
            $("#CreateFollowUpHistory").ejDialog("open");
            }
            else
            {
                alert("This Enquiry Do not have Quotation Either Quotation not send to Customer...")
            }


        }
    }
</script>
@{
    Html.EJ()
        .Dialog("CreateFollowUpHistory")
        .Title("<a id='Title'></a>")
        .Width(1100)
        .Height(400)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
        function openDialog() {
            $("#CreateFollowUpHistory").ejDialog("open");
        }
        function openNestedDialog() {
            $("#CreateFollowUpHistory").ejDialog("open");
        }
</script>
@{
    Html.EJ()
        .Dialog("CloseEnquiry")
        .Title("<a id='Title'>Close Enquiry</a>")
        .Width(650)
        .Height(400)
        .ShowOnInit(false)
        .ContentTemplate(@<p>Close Enquiry</p>)
            .Render();
}
<script>
        function openDialog() {
            $("#CloseEnquiry").ejDialog("open");
        }
        function openNestedDialog() {
            $("#CloseEnquiry").ejDialog("open");
        }
</script>


