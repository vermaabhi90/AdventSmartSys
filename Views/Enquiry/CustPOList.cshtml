@model SmartSys.BL.Enquiry.CustomerPOModel

@{
    ViewBag.Title = "Sales Order List";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Sales Order List
</div>
<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CretaePurchaseOrder", new { PurchaseOrderId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf" })
</div>
    <div style="position:relative">
        @(Html.EJ().Grid<SmartSys.BL.Enquiry.EnquiryModel>("grdDWPOList")
                .Datasource((IEnumerable<object>)@Model.POlist)
        .AllowFiltering()
        .AllowPaging()
        .AllowSorting()
                .PageSettings(p => { p.PageSize(20); })
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
        .EnableAltRow(true)
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
         .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportSODetailList")))
         .ToolbarSettings(toolbar => { toolbar.ShowToolbar().ToolbarItems(items => { items.AddTool(ToolBarItems.Search); }); })
                   //.ContextMenuSettings(contextMenu =>
                   //{
                   //    contextMenu.EnableContextMenu()
                   //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Cancel))
                   //    .CustomContextMenuItems(new List<string> { "Add PO", "Edit PO" });
                   //})
                   .ContextMenuSettings(contextMenu =>
                   {
                       contextMenu.EnableContextMenu();
                       contextMenu.DisableDefaultItems();
                       contextMenu.CustomContextMenuItems(c =>
                       {
                           c.AddItem("Add_PO", "Add PO");
                           c.AddItem("Edit_PO", "Edit PO");
                       });

                   })
                  .ClientSideEvents(eve => { eve.ContextOpen("contextopen"); })
                .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
        .Columns(col =>
        {
            col.Field("PurchaseOrderId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("PurchaseOrderNumber").HeaderText("PO Number").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(150).Add();
            col.Field("CompCode").HeaderText("Company").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(80).Add();
            col.Field("PODate").HeaderText("PO Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Left).Width(100).Add();
            col.Field("CustomerName").HeaderText("Customer Name").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
            col.Field("StatusStr").HeaderText("Status").TextAlign(TextAlign.Left).Width(120).Add();
            col.Field("Status").HeaderText("Status").Visible(false).TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
            //  col.Field("ExpectedDate").HeaderText("Expecte dDate").TextAlign(TextAlign.Center).Width(200).Add();
            col.Field("SalesOrderNo").HeaderText("Sales Order No").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
            col.Field("ModifiedBy").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified By").Width(100).Add();
            col.Field("ModifiedDate").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
            col.HeaderText("Edit").Commands(command =>
            {
                command.Type(UnboundType.Edit)

                       .ButtonOptions(new Syncfusion.JavaScript.Models.ButtonProperties()
                       {
                           CssClass = "EditBtn",
                           Text = "Edit",
                           ContentType = ContentType.ImageTextImage,
                           PrefixIcon = "e-edit",
                           Height = "22px",
                           Size = ButtonSize.Mini
                       }).Add();

            })
            .AllowFiltering(false)
            .TemplateID("#BtnEdit")
            .IsUnbound(true)
            .TextAlign(TextAlign.Left)
            .Width(60)
            .Add();

        })
        )
    </div>
    <script id="BtnEdit" type="text/x-jsrender">
        <a class="btn-xs btn-info  glyphicon glyphicon-pencil black" href="/Enquiry/CretaePurchaseOrder?PurchaseOrderId={{:PurchaseOrderId}}"></a>
    </script>

    <script>
        function contextclick(args) {

            if (args.text == "Add PO") {
                var path = '@Url.Content("~/Enquiry/CretaePurchaseOrder")' + "?PurchaseOrderId=0"
                event.preventDefault();
                window.location.replace(path);
            }
            else
                if (args.text == "Edit PO") {
                    var tempData = args.text;
                    var grid = $("#grdDWPOList").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var PurchaseOrderId = result[0]["PurchaseOrderId"];
                    var status = result[0]["Status"];
                    var path = '@Url.Content("~/Enquiry/CretaePurchaseOrder")' + "?PurchaseOrderId=" + PurchaseOrderId
                    event.preventDefault();
                    window.location.replace(path);

                }
        }
    </script>



