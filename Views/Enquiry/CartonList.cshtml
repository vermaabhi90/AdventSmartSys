@model IEnumerable<SmartSys.BL.Enquiry.CartonModel>

@{
    ViewBag.Title = "CartonList";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Carton List
</div>

<div style="position:relative">
    @(Html.EJ().Grid<SmartSys.BL.SysDBCon.SysDBConModel>("grdCartonProject")
        .Datasource((IEnumerable<SmartSys.BL.Enquiry.CartonModel>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .AllowSorting()
                .PageSettings(p => { p.PageSize(20); })
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
         .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportCartonList")))

        .EditSettings(e => e.AllowAdding().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"))
        .ContextMenuSettings(contextMenu =>
        {
            contextMenu.EnableContextMenu()
                .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.AddRecord))
                .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.EditRecord));
        })
        .EnableAltRow(true)
        .AllowSorting(true)

            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    //items.AddTool(ToolBarItems.ExcelExport);
                });
            })
        .Columns(col =>
        {
            col.Field("Id").Visible(true).AllowEditing(false).HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Height").Visible(true).HeaderText("Height").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Width").HeaderText("Width").Width(160).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("Length").HeaderText("Length").Width(160).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();          
            col.Field("CreatedBy").AllowEditing(false).HeaderText("Created By").Width(180).Add();
            col.Field("CreatedDate").AllowEditing(false).HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:mm}").Width(140).Add();
            col.Field("ModifiedBy").AllowEditing(false).HeaderText("Modified By").Width(180).Add();
            col.Field("ModifiedDate").AllowEditing(false).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:mm}").Width(140).Add();
        })
            .ClientSideEvents(eve =>
            {
                eve.ActionComplete("complete");
                eve.ContextClick("contextclick");
            })
    )
</div>
<script type="text/template" id="template">
    <b>Add / Edit Carton Detail</b>
    <table cellspacing="10" style="width:900px">
        <tr id="IDs">
            <td style="text-align: right; width:100px">
                Id:
            </td>
            <td style="text-align: left">
                <input id="Id" name="Id" value="{{:Id}}" readonly="readonly" class="e-field e-ejinputtext valid "
                       style="text-align: right; width: 116px; height: 28px" />
            </td>

        </tr>
        <tr>
            <td style="width:120px; text-align: right;">
                Height:
            </td>
            <td style="text-align: left">
                <input type="text" id="Height" name="Height" class="form-control" value="{{:Height}}" />
            </td>
            <td style="width:100px; text-align: right;">
                Weight:
            </td>
            <td style="text-align: left">
                <input type="text" id="Width" name="Width" class="form-control" value="{{:Width}}" />
            </td>
            <td style="width:100px; text-align: right;">
                Length:
            </td>
            <td style="text-align: left">
                <input type="text" id="Length" name="Length" class="form-control" value="{{:Length}}" />
            </td>
        </tr>
       
        <tr>
            <td style="width:120px; text-align: right;">
               Created By:
            </td>
            <td style="text-align: left">
                <input type="text" id="CreatedBy" readonly="readonly" name="CreatedBy" class="form-control" value="{{:CreatedBy}}" />
            </td>
            <td style="width:100px; text-align: right;">
                Created Date:
            </td>
            <td style="text-align: left">
                <input type="text" id="CreatedDate" readonly="readonly" name="CreatedDate" class="form-control" value="{{:CreatedDate}}" />
            </td>
            <td style="width:100px; text-align: right;">
                Modified By:
            </td>
            <td style="text-align: left">
                <input type="text" id="ModifiedBy" readonly="readonly" name="ModifiedBy" class="form-control" value="{{:ModifiedBy}}" />
            </td>
            <td style="width:100px; text-align: right;">
                Modified Date:
            </td>
            <td style="text-align: left">
                <input type="text" id="ModifiedDate" readonly="readonly" name="ModifiedDate" class="form-control" value="{{:ModifiedDate}}" />
            </td>
        </tr>
    </table>
</script>
<script>
    function complete(args) {
        if (args.requestType == "save") {
            var rec = args.data;
            $.ajax({
                dataType: 'json',
                type: "POST",
                url: "/Enquiry/SaveCarton",  //Update is Server side method
                data: { Model: rec },
                complete: function () {
                },
                success: function (msg) {
                    alert("Successfully Saved....");
                    var path = '@Url.Content("~/Enquiry/CartonList")'
                    event.preventDefault();
                    window.location.replace(path);
                },
                error: function (msg) {
                    alert("Error " + msg.d.toString());
                }
            });
        }
    }
</script>