@model IEnumerable<SmartSys.BL.Enquiry.ReasonModel>

@{
    ViewBag.Title = "GetReasonList";
}

<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Reason List
</div>

<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CreateReason", new { ReasonId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf" })
</div>
    <div style="position:relative">
        @(Html.EJ().Grid<SmartSys.BL.Enquiry.DispatchModel>("grdReasonList")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
         .ToolbarSettings(toolbar => { toolbar.ShowToolbar().ToolbarItems(items => { items.AddTool(ToolBarItems.Search); }); })
        .EnableAltRow(true)
         .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportReasonList")))
         .ContextMenuSettings(contextMenu =>
         {
             contextMenu.EnableContextMenu();
             contextMenu.DisableDefaultItems();
             contextMenu.CustomContextMenuItems(c =>
             {
                 c.AddItem("Add_Record", "Add Record");
                 c.AddItem("Edit1", "Edit Record");
             });

         })

        .Columns(col =>
        {
            col.Field("ReasonId").HeaderText("Reason Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(70).Add();
            col.Field("Reason").HeaderText("Reason").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
            col.Field("CreatedBy").HeaderText("Created By").TextAlign(TextAlign.Left).Width(70).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").TextAlign(TextAlign.Left).Width(70).Add();
            col.Field("ModifiedBy").HeaderText("Modified By").TextAlign(TextAlign.Left).Width(70).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").TextAlign(TextAlign.Left).Width(70).Add();

        })

         .ClientSideEvents(eve =>
         {
             eve.ContextClick("contextclick");
         })
        )
    </div>

    <script>
    function contextclick(args) {
        if (args.text == "Add Record") {
            var path = '@Url.Content("~/Enquiry/CreateReason")' + "?ReasonId=" + 0
            event.preventDefault();
            window.location.replace(path);
        }
        else
            if (args.text == "Edit Record") {
                var tempData = args.text;
                var grid = $("#grdReasonList").ejGrid("instance");
                var result = this.getSelectedRecords();
                var ReasonId = result[0]["ReasonId"];
                var path = '@Url.Content("~/Enquiry/CreateReason")' + "?ReasonId=" + ReasonId
                event.preventDefault();
                window.location.replace(path);
            }
    }
    </script>
