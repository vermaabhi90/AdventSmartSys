@model SmartSys.BL.DW.VendorListModel
<div style="margin-left:30px;margin-bottom:20px">
    <table>
        <tr>

            <td>
                <label class="glyphicon text-warning" style="font-size:medium;color:red"> Item Details of:</label>
            </td>
            <td>
                &nbsp;
            </td>

            <td>
                <label class="glyphicon  text-primary" style="font-size:medium">&nbsp;@ViewBag.ItemName&nbsp;</label>
            </td>
        </tr>
    </table>
</div>

@{

    Html.EJ()
        .Dialog("VendorResponseDetails")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(800)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#VendorResponseDetails").ejDialog("open");
    }
    function openNestedDialog() {
        $("#VendorResponseDetails").ejDialog("open");
    }
</script>

@{

    Html.EJ()
        .Dialog("QuotaionDetails")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(600)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#QuotaionDetails").ejDialog("open");
    }
    function openNestedDialog() {
        $("#QuotaionDetails").ejDialog("open");
    }
</script>

@{

    Html.EJ()
        .Dialog("PurchaseOrderDetails")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(600)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#PurchaseOrderDetails").ejDialog("open");
    }
    function openNestedDialog() {
        $("#PurchaseOrderDetails").ejDialog("open");
    }
</script>

@{

    Html.EJ()
        .Dialog("EqiuipmentDetails")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(700)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#EqiuipmentDetails").ejDialog("open");
    }
    function openNestedDialog() {
        $("#EqiuipmentDetails").ejDialog("open");
    }
</script>


@{

    Html.EJ()
        .Dialog("DispatchDetail")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(700)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#DispatchDetail").ejDialog("open");
    }
    function openNestedDialog() {
        $("#DispatchDetail").ejDialog("open");
    }
</script>

@{

    Html.EJ()
        .Dialog("CreateCustomerEnquiryForCust")
        .Title("<a id='Title'></a>")
        .Width(1200)
        .Height(700)
        .ShowOnInit(false)
        .ContentTemplate(@<p></p>)
            .Render();
}
<script>
    function openDialog() {
        $("#CreateCustomerEnquiryForCust").ejDialog("open");
    }
    function openNestedDialog() {
        $("#CreateCustomerEnquiryForCust").ejDialog("open");
    }
</script>

                @{Html.EJ().Tab("defaultTabs").ShowCloseButton(true).Items(data =>
                    {
                    data.Add().ID("ProjectList").Text("Project Details").ContentTemplate(
                        @<div>
                            <div style="position:relative">
                                @(Html.EJ().Grid<SmartSys.BL.SysDBCon.SysDBConModel>("grdProject")
            .Datasource((IEnumerable<SmartSys.BL.Project.ProjectModel>)ViewBag.Projectlist)
            .AllowFiltering()
            .AllowPaging()
            .AllowSorting()
                .AllowGrouping()
            .EnableHeaderHover()
            .AllowResizing()
            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
            .AllowScrolling()

                  
             //.ContextMenuSettings(contextMenu =>
             //{
             //    contextMenu.EnableContextMenu()
             //        .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Save))
             //             .CustomContextMenuItems(new List<string> { "View Project Detail" });

             //})
             .ContextMenuSettings(contextMenu =>
             {
                 contextMenu.EnableContextMenu();
                 contextMenu.DisableDefaultItems();
                 contextMenu.CustomContextMenuItems(c =>
                 {
                     c.AddItem("Project111", "View Project Detail");
                 });

             })
            .EnableAltRow(true)
            .AllowSorting(true)


            .Columns(col =>
            {
                col.Field("ProjectId").Visible(false).AllowEditing(false).HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
                col.Field("ProjectTypeId").Visible(false).AllowEditing(false).ValidationRules(v => v.AddRule("required", true)).HeaderText("Type ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
                col.Field("ProjectName").HeaderText("Project Name").Width(160).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
                col.Field("Description").Width(180).Add();
                col.Field("ProjectManagerId").Width(180).Visible(false).Add();
                col.Field("ProjectManager").HeaderText("Project Manager").Width(180).Add();
                col.Field("StatusDescription").HeaderText("Status").Width(180).Add();
                col.Field("StartDate").AllowEditing(false).HeaderText("Start Date").Format("{0:MM/dd/yyyy}").Width(110).Add();
                col.Field("EndDate").AllowEditing(false).HeaderText("End Date").Format("{0:MM/dd/yyyy}").Width(110).Add();
                col.Field("Region").HeaderText("Region").Add();
                col.Field("CustomerId").Visible(false).Add();
                col.Field("VendorId").Visible(false).Add();
                col.Field("ItemPermission").Visible(false).Add();
                col.Field("CompCode").Visible(true).Add();
                col.Field("CreatedByName").AllowEditing(false).HeaderText("Created By").Width(180).Add();
                col.Field("CreatedDate").AllowEditing(false).HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:mm}").Width(140).Add();
                col.Field("ModifiedByName").AllowEditing(false).HeaderText("Modified By").Width(180).Add();
                col.Field("ModifiedDate").AllowEditing(false).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:mm}").Width(140).Add();
               // col.HeaderText("Manage Task").Template("#ManageProjectTemplate").AllowFiltering(false).Width(120).TextAlign(TextAlign.Center).HeaderTextAlign(TextAlign.Center).Add();
               // col.HeaderText("Risk Task").Template("#CreateRisk").AllowFiltering(false).Width(120).TextAlign(TextAlign.Center).HeaderTextAlign(TextAlign.Center).Add();
               // col.HeaderText("Case Task").Template("#CreateCase").AllowFiltering(false).Width(120).TextAlign(TextAlign.Center).HeaderTextAlign(TextAlign.Center).Add();
                col.Field("SegmentId").Visible(false).Add();
                //  col.Field("SegmentName").HeaderText("Segment").Width(100).Add();
                col.Field("CustomerName").HeaderText("Customer Name").Width(100).Add();
                col.Field("VendorName").HeaderText("Vendor Name").Width(100).Add();
            })
            .ClientSideEvents(eve =>
            {
                eve.ActionComplete("complete");
                eve.ContextClick("contextclick");
            })


                                )
                            </div>
                        </div>);
                        data.Add().ID("DispatchList").Text("Dispatch Details").ContentTemplate(
                            @<div>
                                <div style="position:relative">
                                    @(Html.EJ().Grid<SmartSys.BL.Enquiry.DispatchModel>("grdDispatchlistDetailList")
                                    .Datasource((IEnumerable<object>)@ViewBag.DispatchList)
                            .AllowFiltering()
                            .AllowPaging()
                            .PageSettings(p => { p.PageSize(20); })
                            .AllowFiltering()
                            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                            .AllowSorting()
                            .AllowGrouping()
                            .EnableHeaderHover()
                            .AllowResizing()
                            .AllowScrolling()

                            .EnableAltRow(true)
                            //.ContextMenuSettings(contextMenu =>
                            //{
                            //    contextMenu.EnableContextMenu()
                            //   .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Save))
                            //   .CustomContextMenuItems(new List<string> { "View More Detail" });
                            //})
                            .ContextMenuSettings(contextMenu =>
                            {
                                contextMenu.EnableContextMenu();
                                contextMenu.DisableDefaultItems();
                                contextMenu.CustomContextMenuItems(c =>
                                {
                                    c.AddItem("More1", "View More Detail");
                                });

                            })
                            .Columns(col =>
                            {
                                col.Field("DispatchId").HeaderText("Dispatch Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(70).Add();
                                col.Field("CompanyName").HeaderText("Company Name").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                col.Field("CustomerName").HeaderText("Customer Name").ValidationRules(v => v.AddRule("required", true)).Width(130).Add();
                                //   col.Field("STLocationName").HeaderText("Location Name").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
                                col.Field("DispatchDate").HeaderText("Dispatch Date").Format("{0:MM/dd/yyyy}").ValidationRules(v => v.AddRule("required", true)).Width(70).Add();
                                col.Field("StatusDesc").HeaderText("Status").TextAlign(TextAlign.Left).Width(90).Add();
                                col.Field("AirwayBillNo").HeaderText("Airway Bill No").TextAlign(TextAlign.Left).Width(70).Add();
                                col.Field("Invoice_No").HeaderText("Invoice No").TextAlign(TextAlign.Left).Width(140).Add();
                                col.Field("ExportPermitNo").HeaderText("Export Permit No").TextAlign(TextAlign.Left).Width(100).Add();
                                col.Field("FreightForwarderName").HeaderText("FreightForwarder Name").TextAlign(TextAlign.Left).Width(140).Add();
                                col.Field("CreatedBy").HeaderText("Created By").TextAlign(TextAlign.Left).Width(70).Add();
                                col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").TextAlign(TextAlign.Left).Width(70).Add();
                                col.Field("ModifiedBy").HeaderText("Modified By").TextAlign(TextAlign.Left).Width(70).Add();
                                col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").TextAlign(TextAlign.Left).Width(70).Add();
                               
                            })

                             .ClientSideEvents(eve =>
                             {
                                 eve.ContextClick("DisPatchcontextclick");

                             })
                                    )
                                </div>

                            </div>);
                        data.Add().ID("EnquiryList").Text("Enquiry Details").ContentTemplate(
                            @<div>
                                <div style="position:relative">
                                    @(Html.EJ().Grid<SmartSys.BL.Enquiry.DispatchModel>("GrdEnquiry")
                                    .Datasource((IEnumerable<object>)@ViewBag.EnquiryList)
                            .AllowPaging()
                            .AllowSorting()
                            .AllowFiltering()
                            .AllowGrouping()
                            .EnableHeaderHover()
                                    .PageSettings(p => { p.PageSize(20); })
                            .AllowResizing()
                            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                            .AllowScrolling()

                            .EnableAltRow(true)


                                    //.ContextMenuSettings(contextMenu =>
                                    //{
                                    //    contextMenu.EnableContextMenu()
                                    //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Save))
                                    //    .CustomContextMenuItems(new List<string> { "View Enquiry" });
                                    //})
                                    .ContextMenuSettings(contextMenu =>
                                    {
                                        contextMenu.EnableContextMenu();
                                        contextMenu.DisableDefaultItems();
                                        contextMenu.CustomContextMenuItems(c =>
                                        {
                                            c.AddItem("Enquiry1", "View Enquiry");
                                        });

                                    })

                                    .ClientSideEvents(eve => { eve.ContextClick("Enquirycontextclick"); })
                            .Columns(col =>
                            {
                                col.Field("EnqId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
                                col.Field("EnqNumber").HeaderText("Enq Number").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(100).Add();
                                col.Field("EnqDate").HeaderText("Enq Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Left).Width(150).Add();
                                col.Field("CustomerName").HeaderText("Customer Name").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
                                col.Field("StatusStr").HeaderText("Status").TextAlign(TextAlign.Left).Width(100).Add();
                                col.Field("Status").HeaderText("Status").Visible(false).TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(100).Add();
                                col.Field("Priority").HeaderText("Priority").TextAlign(TextAlign.Center).Width(100).Add();
                                col.Field("ContactName").HeaderText(" Customer Contact Name").TextAlign(TextAlign.Left).Width(170).Add();
                                col.Field("ModifiedBy").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified By").Width(150).Add();
                                col.Field("ModifiedDate").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(120).Add();
                               

                            })
                                    )
                                </div>

                            </div>);
                        data.Add().ID("EquipmentList").Text("Equipment Details").ContentTemplate(
                            @<div>
                                <div style="position:relative">
                                                        @(Html.EJ().Grid<SmartSys.BL.Enquiry.DispatchModel>("GrdEqipMentList")
                                                .Datasource((IEnumerable<object>)@ViewBag.EquipMentList)
                                        .AllowPaging()
                                        .AllowSorting()
                                        .AllowFiltering()
                                        .AllowGrouping()
                                        .EnableHeaderHover()
                                                .PageSettings(p => { p.PageSize(20); })
                                        .AllowResizing()
                                        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                        .AllowScrolling()

                                        .EnableAltRow(true)
                                        .ContextMenuSettings(contextMenu =>
                                        {
                                            contextMenu.EnableContextMenu();
                                            contextMenu.DisableDefaultItems();
                                            contextMenu.CustomContextMenuItems(c =>
                                            {
                                                c.AddItem("Equipment1", "View Equipment");
                                            });

                                        })

                                                  //.ContextMenuSettings(contextMenu =>
                                                  //{
                                                  //    contextMenu.EnableContextMenu()
                                                  //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Save))
                                                  //    .CustomContextMenuItems(new List<string> { "View Equipment" });
                                                  //})
                                                  .ClientSideEvents(eve => { eve.ContextClick("Equipmentcontextclick"); })
                                        .Columns(co =>
                                        {
                                            co.Field("EquipmentId").Visible(false).HeaderText("Equipment Id").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("EquipmentName").HeaderText("Equipment Name").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("Description").HeaderText("Description").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("TAM").HeaderText("TAM").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("Rate").HeaderText("Rate").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("CurrencyCodes").HeaderText("Currency Code").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("SegmentId").HeaderText("SegmentId").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("ModifiedByName").HeaderText("Modified By").ValidationRules(v => v.AddRule("required", true)).Width(110).Add();
                                            co.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").Add();
                                          

                                        })
                                                        )
                                                    </div>

                                                </div>);
                        data.Add().ID("CustPoList").Text("PO Details").ContentTemplate(
                            @<div>
                                <div style="position:relative">
                                    @(Html.EJ().Grid<SmartSys.BL.Enquiry.EnquiryModel>("grdDWPOList")
                                    .Datasource((IEnumerable<object>)ViewBag.CustPOList)
                            .AllowFiltering()
                            .AllowPaging()
                            .AllowSorting()
                            .EnableHeaderHover()
                            .AllowResizing()
                                    .PageSettings(p => { p.PageSize(20); })
                            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                            .AllowScrolling()

                            .EnableAltRow(true)

                                       //.ContextMenuSettings(contextMenu =>
                                       //{
                                       //    contextMenu.EnableContextMenu()
                                       //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Cancel))
                                       //    .CustomContextMenuItems(new List<string> { "View PO Details" });
                                       //})
                                       .ContextMenuSettings(contextMenu =>
                                       {
                                           contextMenu.EnableContextMenu();
                                           contextMenu.DisableDefaultItems();
                                           contextMenu.CustomContextMenuItems(c =>
                                           {
                                               c.AddItem("PO_Details", "View PO Details");
                                           });

                                       })
                                      .ClientSideEvents(eve => { eve.ContextOpen("contextopen"); })
                                    .ClientSideEvents(eve => { eve.ContextClick("POcontextclick"); })
                            .Columns(col =>
                            {
                                col.Field("PurchaseOrderId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
                                col.Field("PurchaseOrderNumber").HeaderText("PO Number").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
                                col.Field("PODate").HeaderText("PO Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Left).Width(200).Add();
                                col.Field("CustomerName").HeaderText("Customer Name").TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
                                col.Field("StatusStr").HeaderText("Status").TextAlign(TextAlign.Left).Width(200).Add();
                                col.Field("Status").HeaderText("Status").Visible(false).TextAlign(TextAlign.Left).ValidationRules(v => v.AddRule("required", true)).Width(200).Add();
                                //  col.Field("ExpectedDate").HeaderText("Expecte dDate").TextAlign(TextAlign.Center).Width(200).Add();

                                col.Field("ModifiedBy").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified By").Width(200).Add();
                                col.Field("ModifiedDate").AllowEditing(false).TextAlign(TextAlign.Left).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
                               

                            })
                                    )
                                </div>

                            </div>);
                        data.Add().ID("QuotationList").Text("Quotaion Details").ContentTemplate(
                            @<div>
                                <div style="position:relative">
                                    @(Html.EJ().Grid<SmartSys.BL.Enquiry.QuotationModel>("QuotationList")
                       .Datasource((IEnumerable<object>)ViewBag.QuotationList)
                       .AllowFiltering()
                       .AllowPaging()
                       .AllowSorting()
                       .EnableHeaderHover()
                       .AllowResizing()
                               .PageSettings(p => { p.PageSize(20); })
                       .AllowGrouping()
                                    .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                    .AllowScrolling()

                                    //.ContextMenuSettings(contextMenu =>
                                    //{
                                    //    contextMenu.EnableContextMenu()
                                    //    .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Cancel))
                                    //    .CustomContextMenuItems(new List<string> { "View Quotation Details" });
                                    //})
                                    .ContextMenuSettings(contextMenu =>
                                    {
                                        contextMenu.EnableContextMenu();
                                        contextMenu.DisableDefaultItems();
                                        contextMenu.CustomContextMenuItems(c =>
                                        {
                                            c.AddItem("Quotation_Details", "View Quotation Details");
                                        });

                                    })
                                    .EditSettings(e => e.AllowAdding().AllowEditing().EditMode(EditMode.DialogTemplate))

                                    .EnableAltRow(true)
                                    .AllowSorting(true)
                                              .ClientSideEvents(eve => { eve.ContextClick("Quotcontextclick"); })
                            .Columns(col =>
                            {
                                col.Field("QuotationId").HeaderText("Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(30).Add();
                                col.Field("QuotationNumber").HeaderText("Quot Number").IsPrimaryKey(true).TextAlign(TextAlign.Left).Width(120).Visible(true).Add();
                                col.Field("QuotDate").HeaderText("Quot Date").TextAlign(TextAlign.Left).Width(130).Add();
                                col.Field("Terms").HeaderText("Terms").TextAlign(TextAlign.Left).Width(100).Add();
                                col.Field("CustomerName").HeaderText("Customer Name").TextAlign(TextAlign.Left).Width(170).Add();
                                col.Field("EnqId").HeaderText("EnqId").TextAlign(TextAlign.Left).Width(140).Visible(false).Add();
                                col.Field("EnqNumber").HeaderText("EnqNumber").TextAlign(TextAlign.Left).Width(140).Visible(false).Add();
                                col.Field("CompCode").HeaderText("Comp Code").TextAlign(TextAlign.Left).Width(120).Add();
                                col.Field("Status").HeaderText("Status").TextAlign(TextAlign.Left).Width(130).Add();
                                col.Field("ModifiedBy").HeaderText("Modified By").TextAlign(TextAlign.Left).Width(200).Add();
                                col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();

                                //col.HeaderText("Goto View")
                                //     .Template("#QuotationDetails")
                                //     .IsUnbound(true)
                                //     .AllowFiltering(false)
                                //     .TextAlign(TextAlign.Center)
                                //     .Width(90)
                                //     .Add();
                            })

                                    )
                                </div>



        </div>);
                          data.Add().ID("VendorResponse").Text("Vendor Response Details").ContentTemplate(
                        @<div>
            
                             <div style="position:relative">
                                 @(Html.EJ().Grid<SmartSys.BL.Enquiry.EnquiryItemVendorResponseDetailModel>("grdDWEnquiryItemVendorResponse")
                                        .Datasource((IEnumerable<object>)ViewBag.VendorResponse)
                        .AllowFiltering()
                        .AllowPaging()
                        .AllowSorting()
                        .EnableHeaderHover()
                        .AllowResizing()
                        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                        .AllowScrolling()

                        .EnableAltRow(true)
                                .PageSettings(p => { p.PageSize(20); })
                                 //.ContextMenuSettings(contextMenu =>
                                 //    {
                                 //        contextMenu.EnableContextMenu()
                                 //        .ContextMenuItems(Item => Item.AddTool(ContextMenuItems.Cancel))
                                 //        .CustomContextMenuItems(new List<string> { "View Vendor Response" });
                                 //    })
                                 .ContextMenuSettings(contextMenu =>
                                 {
                                     contextMenu.EnableContextMenu();
                                     contextMenu.DisableDefaultItems();
                                     contextMenu.CustomContextMenuItems(c =>
                                     {
                                         c.AddItem("Vendor_Response", "View Vendor Response");
                                     });

                                 })

                                .ClientSideEvents(eve => { eve.ContextClick("VendRespClick"); })
                        .Columns(col =>
                        {
                            col.Field("ResponseId").HeaderText("Response ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(100).Add();
                            col.Field("VendorName").HeaderText("Vendor Name").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("ContactName").HeaderText("Contact Name").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("ReciptMethod").HeaderText("Receipt Method").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("Currency").HeaderText("Currency").TextAlign(TextAlign.Center).Width(100).Add();
                            col.Field("ReciptDate").HeaderText("Receipt Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("CreatedBy").HeaderText("Created By").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("ModifiedBy").HeaderText("Modified By").TextAlign(TextAlign.Center).Width(200).Add();
                            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").TextAlign(TextAlign.Center).Width(200).Add();

           

                        })
                                 )
                             </div>
                        </div>);
                    if (Model.isPurchase)
                    {
                        data.Add().ID("PurchaseItemBacklog").Text("Purchase Backlog").ContentTemplate(
                        @<div>
                    <div style="position:relative">
                        @(Html.EJ().Grid<SmartSys.BL.Enquiry.EnquiryItemVendorResponseDetailModel>("grdPurItemBacklog")
        .Datasource((IEnumerable<object>)ViewBag.PurchaseItemDetail)
        .AllowFiltering()
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
        .EnableAltRow(true)
        .Columns(col =>
        {
            col.Field("PONumber").HeaderText("PONumber").TextAlign(TextAlign.Center).Width(100).Add();
            col.Field("PODate").AllowEditing(false).Format("{0:MM/dd/yyyy  HH:MM}").HeaderText("PO Date").Width(100).Add();
            col.Field("VendorName").HeaderText("Vendor Name").Visible(true).TextAlign(TextAlign.Left).Width(100).Add();
            col.Field("Description").HeaderText("Description").TextAlign(TextAlign.Left).Width(100).Add();
            col.Field("Quantity").HeaderText("Quantity").Format("{0:N0}").TextAlign(TextAlign.Left).Width(80).Add();
            col.Field("QtyRec").HeaderText("Qty Rec").Format("{0:N0}").TextAlign(TextAlign.Left).Width(80).Add();
            col.Field("QtyInv").HeaderText("Qty Inv").Format("{0:N0}").Width(80).Add();
            col.Field("BalanceQty").HeaderText("Balance Qty").Format("{0:N0}").Width(80).Add();
            col.Field("UnitCost").HeaderText("Unit Cost").Width(80).Add();
            col.Field("Amount").HeaderText("Amount").Width(80).Add();
            col.Field("SalesOrderNumber").HeaderText("SalesOrderNumber").Width(140).Add();
            col.Field("StrCRD").AllowEditing(false).HeaderText("CRD").Width(100).Add();
            col.Field("StrVPD").AllowEditing(false).HeaderText("VPD").Width(100).Add();
        })
                                )
                            </div>
                        </div>);
                    }
                    if (Model.isSales)
                    {
                        data.Add().ID("SalesItemBacklog").Text("Sales Backlog").ContentTemplate(
                        @<div>
                            <div style="position:relative">
                                @(Html.EJ().Grid<SmartSys.BL.Enquiry.EnquiryItemVendorResponseDetailModel>("SalesItemBacklog")
.Datasource((IEnumerable<object>)ViewBag.SalesItemDetail)
.AllowFiltering()
.AllowPaging()
.AllowSorting()
.EnableHeaderHover()
.AllowResizing()
.FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
.AllowScrolling()
.EnableAltRow(true)
.Columns(col =>
{
    col.Field("PONumber").HeaderText("PONumber").TextAlign(TextAlign.Center).Width(100).Add();
    col.Field("PODate").AllowEditing(false).Format("{0:MM/dd/yyyy  HH:MM}").HeaderText("PO Date").Width(100).Add();
    col.Field("CustomerName").HeaderText("Vendor Name").Visible(true).TextAlign(TextAlign.Left).Width(100).Add();
    col.Field("Description").HeaderText("Description").TextAlign(TextAlign.Left).Width(100).Add();
    col.Field("Quantity").HeaderText("Quantity").Format("{0:N0}").TextAlign(TextAlign.Left).Width(80).Add();
    col.Field("QtyRec").HeaderText("Qty Shipped").Format("{0:N0}").TextAlign(TextAlign.Left).Width(80).Add();
    col.Field("QtyInv").HeaderText("Qty Inv").Format("{0:N0}").Width(80).Add();
    col.Field("BalanceQty").HeaderText("Balance Qty").Format("{0:N0}").Width(80).Add();
    col.Field("UnitCost").HeaderText("Unit Cost").Width(80).Add();
    col.Field("Amount").HeaderText("Amount").Width(80).Add();
    col.Field("SalesOrderNumber").HeaderText("SalesOrderNumber").Width(140).Add();
    col.Field("StrCRD").AllowEditing(false).HeaderText("CRD").Width(100).Add();
    col.Field("StrVPD").AllowEditing(false).HeaderText("VPD").Width(100).Add();
})
                                )
                            </div>
                        </div>);
                    }
                    })
 .Render();
}

<br />
<div>
    @Html.ActionLink(" Back", "ItemList", null, new { @class = "btn-xs btn-info glyphicon glyphicon-hand-left" })
</div>

<script>
    function contextclick(args) {
        if (args.text == "View Project Detail") {
            var tempData = args.text;
            var grid = $("#grdProject").ejGrid("instance");
            var result = this.getSelectedRecords();
            var ProjectId = result[0]["ProjectId"];
            var path = '@Url.Content("~/ProViews/ProjectView")' + "?ProjectId=" + ProjectId
            event.preventDefault();
            window.location.replace(path);

        }
    }
</script>


<script>
    function DisPatchcontextclick(args) {

        if (args.text == "View More Detail") {
            var tempData = args.text;
            var grid = $("#grdDispatchlistDetailList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var DispatchId = result[0]["DispatchId"];
            var path = '@Url.Content("~/ProViews/DispatchDetail")' + "?DispatchId=" + DispatchId + "&ItemId=" +@ViewBag.ItmId
        $("#DispatchDetail").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
            $("#DispatchDetail").ejDialog("open");
            //event.preventDefault();EquipMentList
            //window.location.replace(path);
        }
    }
</script>


<script>
    function Enquirycontextclick(args) {

        if (args.text == "View Enquiry") {
            var tempData = args.text;
            var grid = $("#GrdEnquiry").ejGrid("instance");
            var result = this.getSelectedRecords();
            var EnqId = result[0]["EnqId"];
            var path = '@Url.Content("~/ProViews/CreateCustomerEnquiryForCust")' + "?EnqId=" + EnqId + "&ItemId=" + @ViewBag.ItmId
            $("#CreateCustomerEnquiryForCust").ejDialog({
                contentUrl: path,
                contentType: "ajax"
            });
            $("#CreateCustomerEnquiryForCust").ejDialog("open");
            //event.preventDefault();
            //window.location.replace(path);
        }
    }
</script>


<script>
    function Equipmentcontextclick(args) {

        if (args.text == "View Equipment") {
            var tempData = args.text;
            var grid = $("#GrdEqipMentList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var EquipmentId = result[0]["EquipmentId"];
            var path = '@Url.Content("~/ProViews/EqiuipmentDetails")' + "?EquipmentId=" + EquipmentId + "&ItemId=" + @ViewBag.ItmId
        $("#EqiuipmentDetails").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
            $("#EqiuipmentDetails").ejDialog("open");
            //    event.preventDefault();
            //window.location.replace(path);
        }
    }
</script>


<script>
    function POcontextclick(args) {

        if (args.text == "View PO Details") {
            var tempData = args.text;
            var grid = $("#grdDWPOList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var PurchaseOrderId = result[0]["PurchaseOrderId"];
            var path = '@Url.Content("~/ProViews/PurchaseOrderDetails")' + "?PurchaseOrderId=" + PurchaseOrderId + "&ItemId=" + @ViewBag.ItmId
        $("#PurchaseOrderDetails").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
            $("#PurchaseOrderDetails").ejDialog("open");
            //    event.preventDefault();
            //window.location.replace(path);
        }
    }
</script>


<script>
    function Quotcontextclick(args) {

        if (args.text == "View Quotation Details") {
            var tempData = args.text;
            var grid = $("#QuotationList").ejGrid("instance");
            var result = this.getSelectedRecords();
            var EnqNumber = result[0]["EnqNumber"];
            var EnqId = result[0]["EnqId"];
            var CustomerName = result[0]["CustomerName"];
            var QuotationId = result[0]["QuotationId"];
            var path = '@Url.Content("~/ProViews/QuotaionDetails")' + "?EnqId=" + EnqId + "&CustomerName=" + CustomerName + "&EnqNumber=" + EnqNumber + "&ItemId=" +  @ViewBag.ItmId + "&QuotationId=" + QuotationId
        $("#QuotaionDetails").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
            $("#QuotaionDetails").ejDialog("open");
            //    event.preventDefault();
            //window.location.replace(path);
        }
    }
</script>


<script>
    function VendRespClick(args) {

        if (args.text == "View Vendor Response") {
            var tempData = args.text;
            var grid = $("#grdDWEnquiryItemVendorResponse").ejGrid("instance");
            var result = this.getSelectedRecords();
            var ResponseId = result[0]["ResponseId"];
            var path = '@Url.Content("~/ProViews/VendorResponseDetail")' + "?responseId=" + ResponseId + "&ItemId=" + @ViewBag.ItmId
        $("#VendorResponseDetails").ejDialog({
            contentUrl: path,
            contentType: "ajax"
        });
            $("#VendorResponseDetails").ejDialog("open");
            //    event.preventDefault();
            //window.location.replace(path);
        }
    }
</script>