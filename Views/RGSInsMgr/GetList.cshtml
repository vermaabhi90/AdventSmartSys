@model IEnumerable<SmartSys.BL.RGS.InstanceManagerModel>

@{
    ViewBag.Title = "Instance Manager List";
}
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Instance Manager List
</div>

<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "Create", null, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>
<div style="position:relative">
    @(Html.EJ().Grid<SmartSys.BL.SysDBCon.SysDBConModel>("grdDBConnection")
                .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowScrolling()
         .PageSettings(p => { p.PageSize(20); })
        .EnableAltRow(true)
                .PageSettings(p => { p.PageSize(20); })
              .ContextMenuSettings(contextMenu =>
              {
                  contextMenu.EnableContextMenu();
                  contextMenu.DisableDefaultItems();
                  contextMenu.CustomContextMenuItems(c =>
                  {
                      c.AddItem("Add_Record", "Add Record");
                      c.AddItem("Edit_Report", "Edit Record");
                  });

              })
        //.ShowColumnChooser()
        //.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
        //.ToolbarSettings(toolbar =>
        //    {
        //        toolbar.ShowToolbar().ToolbarItems(items =>
        //        {
        //            items.AddTool(ToolBarItems.Add);
        //            items.AddTool(ToolBarItems.Edit);
        //            items.AddTool(ToolBarItems.Update);
        //            items.AddTool(ToolBarItems.Cancel);
        //        });
        //    })
        .Columns(col =>
        {
            col.Field("IMId").HeaderText("ID").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(60).Add();
            col.Field("Host").HeaderText("Host").ValidationRules(v => v.AddRule("required", true)).Width(160).Add();
            col.Field("Port").HeaderText("Port").TextAlign(TextAlign.Left).Width(130).Add();
            col.Field("isPrimary").HeaderText("isPrimary").Width(70).Add();
            col.Field("PollingInterval").HeaderText("Polling Interval").Width(160).Add();
            col.Field("ProcessId").HeaderText("ProcessId").Width(160).Add();
            col.Field("ModifiedByName").AllowEditing(false).HeaderText("Modified By").Width(200).Add();
            col.Field("ModifiedDate").AllowEditing(false).HeaderText("Modified Date").Format("{0:MM/dd/yyyy  HH:MM}").Width(150).Add();
            col.Field("StatusName").HeaderText("StatusName").Width(150).Add();
            col.HeaderText("Edit").Commands(command =>
            {
                command.Type(UnboundType.Edit)

                       .ButtonOptions(new Syncfusion.JavaScript.Models.ButtonProperties()
                       {
                           CssClass = "EditBtn",
                           Text = "Edit",
                           ContentType = ContentType.ImageTextImage,
                           PrefixIcon = "e-edit",
                           Height = "22px",
                           Size = ButtonSize.Mini
                       }).Add();

            }).TemplateID("#BtnTemplate")
            .IsUnbound(true)
            .TextAlign(TextAlign.Left)
            .AllowFiltering(false)
            .Width(90)
            .Add();
        })
          .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
    )
    <script id="BtnTemplate" type="text/x-jsrender">
        <a class="btn-xs btn-info  glyphicon glyphicon-pencil black" href="/RGSInsMgr/Edit?IMId={{:IMId}}"> </a>
    </script>
</div>
<script>
        function contextclick(args) {
            if (args.text == "Add Record") {

                var path = '@Url.Content("~/RGSInsMgr/Create")' 
                event.preventDefault();
                window.location.replace(path);
            }
            if (args.text == "Edit Record") {
                var tempData = args.text;
                var grid = $("#grdDBConnection").ejGrid("instance");
                var result = this.getSelectedRecords();
                var IMId = result[0]["IMId"];

                var path = '@Url.Content("~/RGSInsMgr/Edit")' + "?IMId=" + IMId
                event.preventDefault();
                window.location.replace(path);
            }
        }
</script>
