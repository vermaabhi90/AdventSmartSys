
@model IEnumerable<SmartSys.BL.Project.ExpenseTypeModel>


@using Syncfusion.JavaScript.Models
<div style="margin-left:30px;margin-bottom:20px" class="glyphicon glyphicon-list  text-info">
    Expense Type List
</div>
<div style="margin-bottom:8px;margin-top:5px">
    @Html.ActionLink(" Create", "CreateExpenseType", new { ExpTypeId = 0 }, new { @class = "btn-xs btn-info glyphicon glyphicon-leaf " })
</div>
    <div style="position:relative">
        @(Html.EJ().Grid<SmartSys.BL.Project.ExpenseTypeModel>("grdexpensetypelist")
                                  .Datasource((IEnumerable<object>)@Model)
        .AllowFiltering()
        .AllowPaging()
        .PageSettings(p => { p.PageSize(20); })
        .AllowSorting()
        .EnableHeaderHover()
        .AllowResizing()
                .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                .AllowScrolling()
                  .PageSettings(p => { p.PageSize(20); })
                .EnableAltRow(true)
         .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.ExcelExport);
                }))
             .Mappers(map => map.ExportToExcelAction(@Url.Action("ExportExpenseTypeLst")))
         .ContextMenuSettings(contextMenu =>
         {
             contextMenu.EnableContextMenu();
             contextMenu.DisableDefaultItems();
             contextMenu.CustomContextMenuItems(c =>
             {
                 c.AddItem("Add_Record", "Add Record");
                 c.AddItem("Edit_Record", "Edit Record");
             });

         })
        .Columns(col =>
        {
            col.Field("ExpTypeId").AllowEditing(false).HeaderText("Id").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(100).Add();
            col.Field("ExpenceType").AllowEditing(false).HeaderText("ExpenceType").IsPrimaryKey(true).TextAlign(TextAlign.Center).Width(90).Add();
            col.Field("Description").HeaderText("Description").Width(140).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("CreatedBy").HeaderText("CreatedBy").Width(140).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("CreatedDate").HeaderText("Created Date").Format("{0:MM/dd/yyyy}").Width(120).Add();
            col.Field("ModifiedBy").HeaderText("Modified By").Width(100).Add();
            col.Field("ModifiedDate").HeaderText("Modified Date").Format("{0:MM/dd/yyyy}").Width(120).Add();
            col.HeaderText("Edit").Template("#BtnTemplate").AllowFiltering(false).Width(70).TextAlign(TextAlign.Center).HeaderTextAlign(TextAlign.Center).Add();
        })
                 .ClientSideEvents(eve => { eve.ContextClick("contextclick"); })
        )
    </div>



    <script id="BtnTemplate" type="text/x-jsrender">
        <a class="btn btn-info btn-xs  glyphicon glyphicon-pencil" href="/ProjectCenter/CreateExpenseType?ExpTypeId={{:ExpTypeId}}">  </a>
    </script>

    <script>
        function contextclick(args) {
            if (args.text == "Add Record") {
                var path = '@Url.Content("~/ProjectCenter/CreateExpenseType")' + "?ExpTypeId=" + 0
                event.preventDefault();
                window.location.replace(path);
            }
            else
                if (args.text == "Edit Record") {
                    var tempData = args.text;
                    var grid = $("#grdexpensetypelist").ejGrid("instance");
                    var result = this.getSelectedRecords();
                    var ExpTypeId = result[0]["ExpTypeId"];
                    var path = '@Url.Content("~/ProjectCenter/CreateExpenseType")' + "?ExpTypeId=" + ExpTypeId
                    event.preventDefault();
                    window.location.replace(path);
                }
        }

    </script>
